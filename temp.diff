commit a941f1f1c151e04fb57231ea378820cb218d6b88
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Dec 13 00:40:23 2024 +0800

    Update

commit 7a2e8f4805e556bce803074f62cae36a3fe6b0af
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Dec 13 00:27:54 2024 +0800

    Update

commit de162fdba4744ba0e54b6abe30d0dea8103543b9
Author: he.ma <Clevergua@outlook.com>
Date:   Tue Dec 10 18:07:52 2024 +0800

    Update

commit 7f2551e8ac430f1a24cef847d3f48ac060124aef
Author: he.ma <Clevergua@outlook.com>
Date:   Mon Dec 9 18:09:49 2024 +0800

    Update

commit 0bbd8ed97c27de4ad502e3881ad917ed61e24789
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Nov 20 18:38:15 2024 +0800

    Multi-light implementation.

commit 6286c45917d958c37e65f48044b92f8670eb40e6
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Nov 19 17:10:02 2024 +0800

    Change subpass name.

commit c5fd5a38300fde5f0b4ad9a48171efcb812894ee
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Nov 15 00:28:00 2024 +0800

    Update

commit 1382861eccf66570b9370da58ee126af617f0fc4
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Nov 14 18:18:06 2024 +0800

    Update

commit e5b1f30c33c85294b7ee80f2bf2d12e1b1f63998
Author: he.ma <Clevergua@outlook.com>
Date:   Fri Nov 8 21:39:46 2024 +0800

    Update

commit 05e8b392e29b14c51b10a5c2114ff4ceaa55ae0e
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Nov 3 14:15:40 2024 +0800

    Revert "Upadate"
    
    This reverts commit 333a003f00c334563d2c04c9d356933b3c858ae4.

commit 333a003f00c334563d2c04c9d356933b3c858ae4
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Nov 1 18:06:20 2024 +0800

    Upadate

commit 21467611ca1ac1151d68d6ae34df24d388a3678b
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 29 14:31:16 2024 +0800

    Refactor code;

commit 5eb640245673ae20275352a01ae59b38b5d72de0
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 29 13:11:19 2024 +0800

    Update

commit 238981b3c86fa58c385845bf04237fb98d71c781
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 29 00:59:35 2024 +0800

    Update

commit 5dd8699c3ab70f993a531c722620d78c5df6ec75
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Oct 28 18:27:03 2024 +0800

    Update

commit 9b79986ad28d2121548c606a7fac901bf85e065f
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Oct 28 00:57:05 2024 +0800

    Update

commit e85cdc7ca91baed5dd6ecfd6d75ae5837206c0eb
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 22 18:13:47 2024 +0800

    Update

commit 1b052048513396f161a17b45c74acefa78d2df05
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Oct 12 00:28:33 2024 +0800

    Resize window

commit 8884929dabb6393c2853e04df1108d041855e21d
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Oct 11 19:51:37 2024 +0800

    Update

commit 070b5bb0bbc21b215676d3eb83bc0583f2be3b04
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 27 18:28:43 2024 +0800

    Update

commit e537421258cd9ceb038d9e2b6009a9c37f7cba04
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 26 00:43:12 2024 +0800

    Update

commit b01b69f090a70b0740579ee22c5d1a1122ba70ea
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 23 18:03:20 2024 +0800

    fix memory leak!

commit 3b6043cc34e1645fd7dc27efdead99dfd88875ec
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 23 01:01:16 2024 +0800

    Update

commit 3772d9e570ced7f4beab37eaafb953fb1bc35d08
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Sep 22 02:14:17 2024 +0800

    Update

commit 8e129f2af601c8b9afa3b3197399c564532bb615
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Sep 22 01:41:38 2024 +0800

    Update

commit 5defa3fc4160ad342d3d414433f4d27845e276bd
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Sep 21 03:16:07 2024 +0800

    Update

commit 18e9821d8023dda3eee174e4474ccb27a752eec7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 19 17:31:15 2024 +0800

    Remove model group.

commit 59d87cc8189c0b78e4e449678bd322c5b6d51b62
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 19 00:22:13 2024 +0800

    Fix bugs!

commit 1dc138bc2bbba3e3dfaa7f99da21d3a4bce0ef7c
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 23:31:27 2024 +0800

    Fix bugs!

commit 00970ac1b54cda036a74e77cc349c83313eff964
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 22:48:53 2024 +0800

    Update

commit d056ac391bd237d94e0740fcd7a185b5164eac8a
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 17:15:15 2024 +0800

    Fix bugs

commit a436025c15f2425ecd4c915893e0a19b7195c66c
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 15:10:09 2024 +0800

    Update

commit db27f52e1272eeefcd0525e9defe32a26b63c513
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Sep 17 20:04:56 2024 +0800

    Update

commit 46f5a4dd925722eec3c26a53d0fb37a4bcfde5b7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Sep 17 01:36:10 2024 +0800

    Update

commit c730c5e3aa99ffe154bc68a36f74ab7882a13151
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Sep 14 18:01:11 2024 +0800

    Update

commit 9452747870c02fa88e6a380acc442dfdb4057f11
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Sep 14 01:10:45 2024 +0800

    Update

commit 4340751c32b92dd11b6eecc93a7fc78f096b5ada
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 13 16:07:45 2024 +0800

    Update

commit 6d5920252928e65f7d077d3162989d808131ae12
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 13 00:27:33 2024 +0800

    Update

commit 6c1365c82f129e61050a068f98a1446cc734a939
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 12 01:16:47 2024 +0800

    Update

commit 5990dd66384461e673d8208b90b162164c50bddb
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 11 19:54:56 2024 +0800

    Update

commit b3b9e7c305bc5e245d9f2cc93ae5bc8c2116f9b7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 11 00:54:52 2024 +0800

    Update

commit c77ce9ca7104733aa2c86e8810b81f86974a10bd
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 11 00:34:04 2024 +0800

    Update

commit c2a1ebf59ea06d91dc0c79092ea5fdbc110a9f07
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Sep 10 18:28:15 2024 +0800

    Update

commit e12bc16ccf70600a09e7f8c5c0c11d6e65bb0fc8
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 9 01:28:26 2024 +0800

    Update

commit 70550b0e233f8627f18caaae1f48f3757b2e6e0b
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 6 18:47:30 2024 +0800

    Update

commit fc6a913fef252333a4cb8589949c8871f9302b43
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 6 01:07:30 2024 +0800

    Update deferredRenderPipeline.c

commit 9aabf4dad79e7dd36f96fcd4c41d45804ea5921a
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 5 18:32:26 2024 +0800

    Update

commit 9a7f2d877796dda21e24698f5d902864dc1ecea8
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 5 01:46:17 2024 +0800

    Update

commit 4173e2fa9348e3a82661d2b95757b9092459c6cf
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 2 00:05:58 2024 +0800

    Update

commit 4f55508dcaa90ca95e13155bc53c2d0c8a93f3f2
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Aug 26 18:11:55 2024 +0800

    Update

commit 691c4d267f49abb9281b77dbe45fdeee78226bd7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Aug 26 00:51:01 2024 +0800

    Update

commit b8563a8e017ad2132afcba912f95976204fd5f55
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Aug 25 02:43:21 2024 +0800

    Update

commit 07c33d9e79df98d6985d7269732f2fecc662335f
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Aug 23 18:47:39 2024 +0800

    Update

commit d39bc2154efafcd3fa7aef496896a2a395940718
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Aug 23 01:00:31 2024 +0800

    Update

commit 4772d9e0d2f7a4a1623b93a1ec46e5ad2b6eb729
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Aug 23 00:31:12 2024 +0800

    Update

commit 1a59581d37779664b3c8034b9cbf909f027ca551
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Aug 22 18:17:58 2024 +0800

    Update

commit 48ace1659fb9817b9076d543eacdee202b07a7c8
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Aug 22 01:00:10 2024 +0800

    Update

commit 1ef52b5d5c87dc6d7e512784f34234298e495b7a
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Aug 21 00:46:30 2024 +0800

    Update

commit 507545b411831e79bb063d5da472815ba4337750
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Aug 20 18:45:20 2024 +0800

    Update

commit 00314df6a9d5eecd66029755505fc35839bc6595
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Aug 19 22:06:55 2024 +0800

    Update
commit a941f1f1c151e04fb57231ea378820cb218d6b88
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Dec 13 00:40:23 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 9d87307..3017483 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -11,7 +11,7 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
         .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
         .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
-        .finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
+        .finalLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
     VkAttachmentDescription depthAttachmentDescription = {
         .flags = 0,

commit 7a2e8f4805e556bce803074f62cae36a3fe6b0af
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Dec 13 00:27:54 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index e0ed9f9..9d87307 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -109,12 +109,10 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .pPreserveAttachments = NULL,
     };
 
-    uint32_t subpassCount = 4;
+    uint32_t subpassCount = 2;
     VkSubpassDescription vkSubpassDescriptions[] = {
         geometrySubpassDescription,
         ligthtingSubpassDescription,
-        geometrySubpassDescription,
-        ligthtingSubpassDescription,
     };
     uint32_t dependencyCount = subpassCount - 1;
     VkSubpassDependency subpassDependencies[dependencyCount];
@@ -179,8 +177,28 @@ void DestroyDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
     vkDestroyFramebuffer(vkDevice, pDeferredRenderPass->vkFramebuffer, NULL);
     DestroyVkRenderPass(pDeferredRenderPass, vkDevice);
 }
+void UpdateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, GraphicImage colorGraphicImage, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t width, uint32_t height, VkBuffer globalUniformBuffer, VkBuffer lightsUniformBuffer)
+{
+    vkDestroyFramebuffer(vkDevice, pDeferredRenderPass->vkFramebuffer, NULL);
+    VkImageView attachments[] = {colorGraphicImage.vkImageView, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView};
+    VkFramebufferCreateInfo vkFramebufferCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .renderPass = pDeferredRenderPass->vkRenderPass,
+        .attachmentCount = 4,
+        .pAttachments = attachments,
+        .width = width,
+        .height = height,
+        .layers = 1,
+    };
+    VkResult result = vkCreateFramebuffer(vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffer);
+    TryThrowVulkanError(result);
 
-void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView colorVkImageView, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
+    Subpass *pOpaqueLightingSubpass = &pDeferredRenderPass->opaqueLightingSubpass;
+    RecreateOpaqueLightingSubpassModel(pOpaqueLightingSubpass, vkDevice, globalUniformBuffer, lightsUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
+}
+void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, VkDevice vkDevice)
 {
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
@@ -256,62 +274,6 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
     vkCmdDraw(vkCommandBuffer, 3, 1, 0, 0);
     vkCmdEndRenderPass(vkCommandBuffer);
 
-    // VkRenderPassBeginInfo renderPassBeginInfo =
-    //     {
-    //         .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
-    //         .pNext = NULL,
-    //         .renderPass = pDeferredRenderPass->vkRenderPass,
-    //         .framebuffer = pDeferredRenderPass->vkFramebuffer,
-    //         .renderArea = renderArea,
-    //         .clearValueCount = clearValueCount,
-    //         .pClearValues = clearValues,
-    //     };
-    // vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    // Subpass *pOpaqueGeometrySubpass = &pDeferredRenderPass->opaqueGeometrySubpass;
-    // vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipeline);
-    // for (uint32_t modelIndex = 0; modelIndex < pOpaqueGeometrySubpass->modelCollection.length; modelIndex++)
-    // {
-    //     SubpassModel *pSubpassModel = pOpaqueGeometrySubpass->modelCollection.array[modelIndex];
-    //     if (NULL != pSubpassModel)
-    //     {
-    //         vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-    //         vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-    //         vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
-    //         VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer, pSubpassModel->instanceBuffer};
-    //         VkDeviceSize offsets[] = {0, 0};
-    //         vkCmdBindVertexBuffers(vkCommandBuffer, 0, 2, vertexBuffers, offsets);
-    //         vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, pSubpassModel->instanceCount, 0, 0);
-    //     }
-    // }
-    // vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
-    // // opaqueLighting subpass
-    // Subpass *pOpaqueLightingSubpass = &pDeferredRenderPass->opaqueLightingSubpass;
-    // SubpassModel *pSubpassModel = pOpaqueLightingSubpass->modelCollection.array[0];
-    // vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipeline);
-    // vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-    // vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
-    // vkCmdDraw(vkCommandBuffer, 3, 1, 0, 0);
-    // vkCmdEndRenderPass(vkCommandBuffer);
-
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);
 }
-
-void RecreateDeferredRenderPassFrameBuffer(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, GraphicImage colorGraphicImage, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t width, uint32_t height)
-{
-    VkImageView attachments[] = {colorGraphicImage.vkImageView, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView};
-    VkFramebufferCreateInfo vkFramebufferCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .renderPass = pDeferredRenderPass->vkRenderPass,
-        .attachmentCount = 4,
-        .pAttachments = attachments,
-        .width = width,
-        .height = height,
-        .layers = 1,
-    };
-    VkResult result = vkCreateFramebuffer(vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffer);
-    TryThrowVulkanError(result);
-}
\ No newline at end of file

commit de162fdba4744ba0e54b6abe30d0dea8103543b9
Author: he.ma <Clevergua@outlook.com>
Date:   Tue Dec 10 18:07:52 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 857fcde..e0ed9f9 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -1,34 +1,10 @@
 #include <deferredRenderPass.h>
-static void PrepareCurrentFrambuffer(DeferredRenderPass *pDeferredRenderPass, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, uint32_t width, uint32_t height, VkDevice vkDevice)
-{
-    if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[frameIndex])
-    {
-        VkImageView attachments[] = {swapchainVkImageViews[frameIndex], depthVkImageView, albedoVkImageView, normalVkImageView};
-        VkFramebufferCreateInfo vkFramebufferCreateInfo = {
-            .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
-            .pNext = NULL,
-            .flags = 0,
-            .renderPass = pDeferredRenderPass->vkRenderPass,
-            .attachmentCount = 4,
-            .pAttachments = attachments,
-            .width = width,
-            .height = height,
-            .layers = 1,
-        };
-        VkResult result = vkCreateFramebuffer(vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[frameIndex]);
-        TryThrowVulkanError(result);
-    }
-    else
-    {
-        // continue;
-    }
-}
 
-static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, VkFormat depthVkFormat, VkFormat albedoVkFormat, VkFormat normalVkFormat)
+static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat colorVkFormat, VkFormat depthVkFormat, VkFormat albedoVkFormat, VkFormat normalVkFormat)
 {
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
-        .format = swapchainVkFormat,
+        .format = colorVkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_STORE,
@@ -91,7 +67,7 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
     };
     VkAttachmentReference colorAttachments[] = {opaqueGeometryAlbedoAttachmentReference, opaqueGeometryNormalAttachmentReference};
-    VkSubpassDescription opaqueGeometrySubpassDescription = {
+    VkSubpassDescription geometrySubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 0,
@@ -120,7 +96,7 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .attachment = 3,
         .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
-    VkSubpassDescription opaqueLigthtingSubpassDescription = {
+    VkSubpassDescription ligthtingSubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 3,
@@ -132,11 +108,13 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .preserveAttachmentCount = 0,
         .pPreserveAttachments = NULL,
     };
+
     uint32_t subpassCount = 4;
     VkSubpassDescription vkSubpassDescriptions[] = {
-        opaqueGeometrySubpassDescription,
-        opaqueLigthtingSubpassDescription,
-        
+        geometrySubpassDescription,
+        ligthtingSubpassDescription,
+        geometrySubpassDescription,
+        ligthtingSubpassDescription,
     };
     uint32_t dependencyCount = subpassCount - 1;
     VkSubpassDependency subpassDependencies[dependencyCount];
@@ -171,35 +149,23 @@ static void DestroyVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevic
     vkDestroyRenderPass(vkDevice, pDeferredRenderPass->vkRenderPass, NULL);
 }
 
-static void CreateVkFramebuffers(DeferredRenderPass *pDeferredRenderPass, uint32_t vkFramebufferCount)
-{
-    pDeferredRenderPass->vkFramebufferCount = vkFramebufferCount;
-    pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * vkFramebufferCount);
-    for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
-    {
-        pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
-    }
-}
-static void DestroyVkFramebuffers(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice)
-{
-    for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
-    {
-        if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[i])
-        {
-            // continue;
-        }
-        else
-        {
-            vkDestroyFramebuffer(vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
-        }
-    }
-    TickernelFree(pDeferredRenderPass->vkFramebuffers);
-}
-
-void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t vkFramebufferCount, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer, VkBuffer lightsUniformBuffer)
+void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, GraphicImage colorGraphicImage, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer, VkBuffer lightsUniformBuffer)
 {
-    CreateVkRenderPass(pDeferredRenderPass, vkDevice, swapchainVkFormat, depthGraphicImage.vkFormat, albedoGraphicImage.vkFormat, normalGraphicImage.vkFormat);
-    CreateVkFramebuffers(pDeferredRenderPass, vkFramebufferCount);
+    CreateVkRenderPass(pDeferredRenderPass, vkDevice, colorGraphicImage.vkFormat, depthGraphicImage.vkFormat, albedoGraphicImage.vkFormat, normalGraphicImage.vkFormat);
+    VkImageView attachments[] = {colorGraphicImage.vkImageView, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView};
+    VkFramebufferCreateInfo vkFramebufferCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .renderPass = pDeferredRenderPass->vkRenderPass,
+        .attachmentCount = 4,
+        .pAttachments = attachments,
+        .width = viewport.width,
+        .height = viewport.height,
+        .layers = 1,
+    };
+    VkResult result = vkCreateFramebuffer(vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffer);
+    TryThrowVulkanError(result);
 
     uint32_t subpassIndex = 0;
     CreateOpaqueGeometrySubpass(&pDeferredRenderPass->opaqueGeometrySubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor);
@@ -210,13 +176,12 @@ void DestroyDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
 {
     DestroyOpaqueGeometrySubpass(&pDeferredRenderPass->opaqueGeometrySubpass, vkDevice);
     DestroyOpaqueLightingSubpass(&pDeferredRenderPass->opaqueLightingSubpass, vkDevice);
-    DestroyVkFramebuffers(pDeferredRenderPass, vkDevice);
+    vkDestroyFramebuffer(vkDevice, pDeferredRenderPass->vkFramebuffer, NULL);
     DestroyVkRenderPass(pDeferredRenderPass, vkDevice);
 }
 
-void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
+void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView colorVkImageView, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
 {
-    PrepareCurrentFrambuffer(pDeferredRenderPass, frameIndex, swapchainVkImageViews, depthVkImageView, albedoVkImageView, normalVkImageView, viewport.width, viewport.height, vkDevice);
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
             .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
@@ -226,7 +191,6 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
         };
     VkResult result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
     TryThrowVulkanError(result);
-
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     VkOffset2D offset =
         {
@@ -258,13 +222,13 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
             .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
             .pNext = NULL,
             .renderPass = pDeferredRenderPass->vkRenderPass,
-            .framebuffer = pDeferredRenderPass->vkFramebuffers[frameIndex],
+            .framebuffer = pDeferredRenderPass->vkFramebuffer,
             .renderArea = renderArea,
             .clearValueCount = clearValueCount,
             .pClearValues = clearValues,
         };
-    vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
 
+    vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
     Subpass *pOpaqueGeometrySubpass = &pDeferredRenderPass->opaqueGeometrySubpass;
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipeline);
     for (uint32_t modelIndex = 0; modelIndex < pOpaqueGeometrySubpass->modelCollection.length; modelIndex++)
@@ -274,7 +238,6 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
         {
             vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
             vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-
             vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
             VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer, pSubpassModel->instanceBuffer};
             VkDeviceSize offsets[] = {0, 0};
@@ -291,8 +254,64 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
     vkCmdDraw(vkCommandBuffer, 3, 1, 0, 0);
-
     vkCmdEndRenderPass(vkCommandBuffer);
+
+    // VkRenderPassBeginInfo renderPassBeginInfo =
+    //     {
+    //         .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
+    //         .pNext = NULL,
+    //         .renderPass = pDeferredRenderPass->vkRenderPass,
+    //         .framebuffer = pDeferredRenderPass->vkFramebuffer,
+    //         .renderArea = renderArea,
+    //         .clearValueCount = clearValueCount,
+    //         .pClearValues = clearValues,
+    //     };
+    // vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
+    // Subpass *pOpaqueGeometrySubpass = &pDeferredRenderPass->opaqueGeometrySubpass;
+    // vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipeline);
+    // for (uint32_t modelIndex = 0; modelIndex < pOpaqueGeometrySubpass->modelCollection.length; modelIndex++)
+    // {
+    //     SubpassModel *pSubpassModel = pOpaqueGeometrySubpass->modelCollection.array[modelIndex];
+    //     if (NULL != pSubpassModel)
+    //     {
+    //         vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+    //         vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+    //         vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+    //         VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer, pSubpassModel->instanceBuffer};
+    //         VkDeviceSize offsets[] = {0, 0};
+    //         vkCmdBindVertexBuffers(vkCommandBuffer, 0, 2, vertexBuffers, offsets);
+    //         vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, pSubpassModel->instanceCount, 0, 0);
+    //     }
+    // }
+    // vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
+    // // opaqueLighting subpass
+    // Subpass *pOpaqueLightingSubpass = &pDeferredRenderPass->opaqueLightingSubpass;
+    // SubpassModel *pSubpassModel = pOpaqueLightingSubpass->modelCollection.array[0];
+    // vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipeline);
+    // vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+    // vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+    // vkCmdDraw(vkCommandBuffer, 3, 1, 0, 0);
+    // vkCmdEndRenderPass(vkCommandBuffer);
+
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);
+}
+
+void RecreateDeferredRenderPassFrameBuffer(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, GraphicImage colorGraphicImage, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t width, uint32_t height)
+{
+    VkImageView attachments[] = {colorGraphicImage.vkImageView, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView};
+    VkFramebufferCreateInfo vkFramebufferCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .renderPass = pDeferredRenderPass->vkRenderPass,
+        .attachmentCount = 4,
+        .pAttachments = attachments,
+        .width = width,
+        .height = height,
+        .layers = 1,
+    };
+    VkResult result = vkCreateFramebuffer(vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffer);
+    TryThrowVulkanError(result);
 }
\ No newline at end of file

commit 7f2551e8ac430f1a24cef847d3f48ac060124aef
Author: he.ma <Clevergua@outlook.com>
Date:   Mon Dec 9 18:09:49 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 056e80c..857fcde 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -120,7 +120,7 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .attachment = 3,
         .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
-    VkSubpassDescription ligthtingSubpassDescription = {
+    VkSubpassDescription opaqueLigthtingSubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 3,
@@ -132,10 +132,11 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .preserveAttachmentCount = 0,
         .pPreserveAttachments = NULL,
     };
-    uint32_t subpassCount = 2;
+    uint32_t subpassCount = 4;
     VkSubpassDescription vkSubpassDescriptions[] = {
         opaqueGeometrySubpassDescription,
-        ligthtingSubpassDescription,
+        opaqueLigthtingSubpassDescription,
+        
     };
     uint32_t dependencyCount = subpassCount - 1;
     VkSubpassDependency subpassDependencies[dependencyCount];

commit 0bbd8ed97c27de4ad502e3881ad917ed61e24789
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Nov 20 18:38:15 2024 +0800

    Multi-light implementation.

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index e3cc658..056e80c 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -195,7 +195,7 @@ static void DestroyVkFramebuffers(DeferredRenderPass *pDeferredRenderPass, VkDev
     TickernelFree(pDeferredRenderPass->vkFramebuffers);
 }
 
-void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t vkFramebufferCount, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer)
+void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t vkFramebufferCount, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer, VkBuffer lightsUniformBuffer)
 {
     CreateVkRenderPass(pDeferredRenderPass, vkDevice, swapchainVkFormat, depthGraphicImage.vkFormat, albedoGraphicImage.vkFormat, normalGraphicImage.vkFormat);
     CreateVkFramebuffers(pDeferredRenderPass, vkFramebufferCount);
@@ -203,7 +203,7 @@ void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
     uint32_t subpassIndex = 0;
     CreateOpaqueGeometrySubpass(&pDeferredRenderPass->opaqueGeometrySubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor);
     subpassIndex++;
-    CreateOpaqueLightingSubpass(&pDeferredRenderPass->opaqueLightingSubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
+    CreateOpaqueLightingSubpass(&pDeferredRenderPass->opaqueLightingSubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor, globalUniformBuffer, lightsUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
 }
 void DestroyDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {

commit 6286c45917d958c37e65f48044b92f8670eb40e6
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Nov 19 17:10:02 2024 +0800

    Change subpass name.

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 116c570..e3cc658 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -78,20 +78,20 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         normalAttachmentDescription,
     };
 
-    VkAttachmentReference geometryDepthAttachmentReference = {
+    VkAttachmentReference opaqueGeometryDepthAttachmentReference = {
         .attachment = 1,
         .layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
     };
-    VkAttachmentReference geometryAlbedoAttachmentReference = {
+    VkAttachmentReference opaqueGeometryAlbedoAttachmentReference = {
         .attachment = 2,
         .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
     };
-    VkAttachmentReference geometryNormalAttachmentReference = {
+    VkAttachmentReference opaqueGeometryNormalAttachmentReference = {
         .attachment = 3,
         .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
     };
-    VkAttachmentReference colorAttachments[] = {geometryAlbedoAttachmentReference, geometryNormalAttachmentReference};
-    VkSubpassDescription geometrySubpassDescription = {
+    VkAttachmentReference colorAttachments[] = {opaqueGeometryAlbedoAttachmentReference, opaqueGeometryNormalAttachmentReference};
+    VkSubpassDescription opaqueGeometrySubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 0,
@@ -99,24 +99,24 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .colorAttachmentCount = 2,
         .pColorAttachments = colorAttachments,
         .pResolveAttachments = NULL,
-        .pDepthStencilAttachment = &geometryDepthAttachmentReference,
+        .pDepthStencilAttachment = &opaqueGeometryDepthAttachmentReference,
         .preserveAttachmentCount = 0,
         .pPreserveAttachments = NULL,
     };
 
-    VkAttachmentReference lightingColorAttachmentReference = {
+    VkAttachmentReference opaqueLightingColorAttachmentReference = {
         .attachment = 0,
         .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
     };
-    VkAttachmentReference lightingDepthAttachmentReference = {
+    VkAttachmentReference opaqueLightingDepthAttachmentReference = {
         .attachment = 1,
         .layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
     };
-    VkAttachmentReference lightingAlbedoAttachmentReference = {
+    VkAttachmentReference opaqueLightingAlbedoAttachmentReference = {
         .attachment = 2,
         .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
-    VkAttachmentReference lightingNormalAttachmentReference = {
+    VkAttachmentReference opaqueLightingNormalAttachmentReference = {
         .attachment = 3,
         .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
@@ -124,9 +124,9 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 3,
-        .pInputAttachments = (const VkAttachmentReference[]){lightingDepthAttachmentReference, lightingAlbedoAttachmentReference, lightingNormalAttachmentReference},
+        .pInputAttachments = (const VkAttachmentReference[]){opaqueLightingDepthAttachmentReference, opaqueLightingAlbedoAttachmentReference, opaqueLightingNormalAttachmentReference},
         .colorAttachmentCount = 1,
-        .pColorAttachments = &lightingColorAttachmentReference,
+        .pColorAttachments = &opaqueLightingColorAttachmentReference,
         .pResolveAttachments = NULL,
         .pDepthStencilAttachment = NULL,
         .preserveAttachmentCount = 0,
@@ -134,7 +134,7 @@ static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
     };
     uint32_t subpassCount = 2;
     VkSubpassDescription vkSubpassDescriptions[] = {
-        geometrySubpassDescription,
+        opaqueGeometrySubpassDescription,
         ligthtingSubpassDescription,
     };
     uint32_t dependencyCount = subpassCount - 1;
@@ -201,14 +201,14 @@ void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice
     CreateVkFramebuffers(pDeferredRenderPass, vkFramebufferCount);
 
     uint32_t subpassIndex = 0;
-    CreateGeometrySubpass(&pDeferredRenderPass->geometrySubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor);
+    CreateOpaqueGeometrySubpass(&pDeferredRenderPass->opaqueGeometrySubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor);
     subpassIndex++;
-    CreateLightingSubpass(&pDeferredRenderPass->lightingSubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
+    CreateOpaqueLightingSubpass(&pDeferredRenderPass->opaqueLightingSubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
 }
 void DestroyDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
-    DestroyGeometrySubpass(&pDeferredRenderPass->geometrySubpass, vkDevice);
-    DestroyLightingSubpass(&pDeferredRenderPass->lightingSubpass, vkDevice);
+    DestroyOpaqueGeometrySubpass(&pDeferredRenderPass->opaqueGeometrySubpass, vkDevice);
+    DestroyOpaqueLightingSubpass(&pDeferredRenderPass->opaqueLightingSubpass, vkDevice);
     DestroyVkFramebuffers(pDeferredRenderPass, vkDevice);
     DestroyVkRenderPass(pDeferredRenderPass, vkDevice);
 }
@@ -264,17 +264,17 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
 
-    Subpass *pGeometrySubpass = &pDeferredRenderPass->geometrySubpass;
-    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
-    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->modelCollection.length; modelIndex++)
+    Subpass *pOpaqueGeometrySubpass = &pDeferredRenderPass->opaqueGeometrySubpass;
+    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipeline);
+    for (uint32_t modelIndex = 0; modelIndex < pOpaqueGeometrySubpass->modelCollection.length; modelIndex++)
     {
-        SubpassModel *pSubpassModel = pGeometrySubpass->modelCollection.array[modelIndex];
+        SubpassModel *pSubpassModel = pOpaqueGeometrySubpass->modelCollection.array[modelIndex];
         if (NULL != pSubpassModel)
         {
             vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
             vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
 
-            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
             VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer, pSubpassModel->instanceBuffer};
             VkDeviceSize offsets[] = {0, 0};
             vkCmdBindVertexBuffers(vkCommandBuffer, 0, 2, vertexBuffers, offsets);
@@ -282,13 +282,13 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
         }
     }
     vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
-    // lighting subpass
-    Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
-    SubpassModel *pSubpassModel = pLightingSubpass->modelCollection.array[0];
-    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
+    // opaqueLighting subpass
+    Subpass *pOpaqueLightingSubpass = &pDeferredRenderPass->opaqueLightingSubpass;
+    SubpassModel *pSubpassModel = pOpaqueLightingSubpass->modelCollection.array[0];
+    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pOpaqueLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
     vkCmdDraw(vkCommandBuffer, 3, 1, 0, 0);
 
     vkCmdEndRenderPass(vkCommandBuffer);

commit c5fd5a38300fde5f0b4ad9a48171efcb812894ee
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Nov 15 00:28:00 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 677917c..116c570 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -275,17 +275,13 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
             vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
 
             vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
-
-            VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
-            VkDeviceSize offsets[] = {0};
-            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-            uint32_t vertexCount = pSubpassModel->vertexCount;
-            vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+            VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer, pSubpassModel->instanceBuffer};
+            VkDeviceSize offsets[] = {0, 0};
+            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 2, vertexBuffers, offsets);
+            vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, pSubpassModel->instanceCount, 0, 0);
         }
     }
-
     vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
-
     // lighting subpass
     Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
     SubpassModel *pSubpassModel = pLightingSubpass->modelCollection.array[0];

commit 1382861eccf66570b9370da58ee126af617f0fc4
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Nov 14 18:18:06 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 0dacedc..677917c 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -289,12 +289,11 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
     // lighting subpass
     Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
     SubpassModel *pSubpassModel = pLightingSubpass->modelCollection.array[0];
-
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
-    vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, 1, 0, 0);
+    vkCmdDraw(vkCommandBuffer, 3, 1, 0, 0);
 
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);

commit e5b1f30c33c85294b7ee80f2bf2d12e1b1f63998
Author: he.ma <Clevergua@outlook.com>
Date:   Fri Nov 8 21:39:46 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index ab39cd4..0dacedc 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -266,10 +266,10 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
 
     Subpass *pGeometrySubpass = &pDeferredRenderPass->geometrySubpass;
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
-    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->modelCount; modelIndex++)
+    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->modelCollection.length; modelIndex++)
     {
-        SubpassModel *pSubpassModel = &pGeometrySubpass->models[modelIndex];
-        if (pSubpassModel->isValid)
+        SubpassModel *pSubpassModel = pGeometrySubpass->modelCollection.array[modelIndex];
+        if (NULL != pSubpassModel)
         {
             vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
             vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
@@ -288,7 +288,7 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
 
     // lighting subpass
     Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
-    SubpassModel *pSubpassModel = &pLightingSubpass->models[0];
+    SubpassModel *pSubpassModel = pLightingSubpass->modelCollection.array[0];
 
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);

commit 05e8b392e29b14c51b10a5c2114ff4ceaa55ae0e
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Nov 3 14:15:40 2024 +0800

    Revert "Upadate"
    
    This reverts commit 333a003f00c334563d2c04c9d356933b3c858ae4.

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 4fc5bae..ab39cd4 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -266,14 +266,10 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
 
     Subpass *pGeometrySubpass = &pDeferredRenderPass->geometrySubpass;
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
-    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->models.length; modelIndex++)
+    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->modelCount; modelIndex++)
     {
-        SubpassModel *pSubpassModel = &pGeometrySubpass->models.array[modelIndex];
-        if (NULL == pSubpassModel)
-        {
-            // skip
-        }
-        else
+        SubpassModel *pSubpassModel = &pGeometrySubpass->models[modelIndex];
+        if (pSubpassModel->isValid)
         {
             vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
             vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
@@ -292,7 +288,7 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
 
     // lighting subpass
     Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
-    SubpassModel *pSubpassModel = &pLightingSubpass->models.array[0];
+    SubpassModel *pSubpassModel = &pLightingSubpass->models[0];
 
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);

commit 333a003f00c334563d2c04c9d356933b3c858ae4
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Nov 1 18:06:20 2024 +0800

    Upadate

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index ab39cd4..4fc5bae 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -266,10 +266,14 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
 
     Subpass *pGeometrySubpass = &pDeferredRenderPass->geometrySubpass;
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
-    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->modelCount; modelIndex++)
+    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->models.length; modelIndex++)
     {
-        SubpassModel *pSubpassModel = &pGeometrySubpass->models[modelIndex];
-        if (pSubpassModel->isValid)
+        SubpassModel *pSubpassModel = &pGeometrySubpass->models.array[modelIndex];
+        if (NULL == pSubpassModel)
+        {
+            // skip
+        }
+        else
         {
             vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
             vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
@@ -288,7 +292,7 @@ void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommand
 
     // lighting subpass
     Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
-    SubpassModel *pSubpassModel = &pLightingSubpass->models[0];
+    SubpassModel *pSubpassModel = &pLightingSubpass->models.array[0];
 
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);

commit 21467611ca1ac1151d68d6ae34df24d388a3678b
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 29 14:31:16 2024 +0800

    Refactor code;

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 23f78a7..ab39cd4 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -1,5 +1,5 @@
 #include <deferredRenderPass.h>
-static void PrepareCurrentFrambuffer(RenderPass *pDeferredRenderPass, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, uint32_t width, uint32_t height, VkDevice vkDevice)
+static void PrepareCurrentFrambuffer(DeferredRenderPass *pDeferredRenderPass, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, uint32_t width, uint32_t height, VkDevice vkDevice)
 {
     if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[frameIndex])
     {
@@ -23,7 +23,8 @@ static void PrepareCurrentFrambuffer(RenderPass *pDeferredRenderPass, uint32_t f
         // continue;
     }
 }
-static void CreateVkRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, VkFormat depthVkFormat, VkFormat albedoVkFormat, VkFormat normalVkFormat)
+
+static void CreateVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, VkFormat depthVkFormat, VkFormat albedoVkFormat, VkFormat normalVkFormat)
 {
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
@@ -163,18 +164,13 @@ static void CreateVkRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevic
     VkResult result = VK_SUCCESS;
     result = vkCreateRenderPass(vkDevice, &vkRenderPassCreateInfo, NULL, &pDeferredRenderPass->vkRenderPass);
     TryThrowVulkanError(result);
-
-    pDeferredRenderPass->subpassCount = 2;
-    pDeferredRenderPass->subpasses = TickernelMalloc(sizeof(Subpass) * pDeferredRenderPass->subpassCount);
 }
-
-static void DestroyVkRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
+static void DestroyVkRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
     vkDestroyRenderPass(vkDevice, pDeferredRenderPass->vkRenderPass, NULL);
-    TickernelFree(pDeferredRenderPass->subpasses);
 }
 
-static void CreateVkFramebuffers(RenderPass *pDeferredRenderPass, uint32_t vkFramebufferCount)
+static void CreateVkFramebuffers(DeferredRenderPass *pDeferredRenderPass, uint32_t vkFramebufferCount)
 {
     pDeferredRenderPass->vkFramebufferCount = vkFramebufferCount;
     pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * vkFramebufferCount);
@@ -183,8 +179,7 @@ static void CreateVkFramebuffers(RenderPass *pDeferredRenderPass, uint32_t vkFra
         pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
     }
 }
-
-static void DestroyVkFramebuffers(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
+static void DestroyVkFramebuffers(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
     for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
     {
@@ -200,24 +195,25 @@ static void DestroyVkFramebuffers(RenderPass *pDeferredRenderPass, VkDevice vkDe
     TickernelFree(pDeferredRenderPass->vkFramebuffers);
 }
 
-void CreateDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t vkFramebufferCount, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer)
+void CreateDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t vkFramebufferCount, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer)
 {
     CreateVkRenderPass(pDeferredRenderPass, vkDevice, swapchainVkFormat, depthGraphicImage.vkFormat, albedoGraphicImage.vkFormat, normalGraphicImage.vkFormat);
     CreateVkFramebuffers(pDeferredRenderPass, vkFramebufferCount);
 
-    CreateGeometrySubpass(&pDeferredRenderPass->subpasses[0], pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, 0, vkDevice, viewport, scissor);
-    CreateLightingSubpass(&pDeferredRenderPass->subpasses[1], pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, 1, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
+    uint32_t subpassIndex = 0;
+    CreateGeometrySubpass(&pDeferredRenderPass->geometrySubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor);
+    subpassIndex++;
+    CreateLightingSubpass(&pDeferredRenderPass->lightingSubpass, pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, subpassIndex, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
 }
-
-void DestroyDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
+void DestroyDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
-    DestroyGeometrySubpass(&pDeferredRenderPass->subpasses[0], vkDevice);
-    DestroyLightingSubpass(&pDeferredRenderPass->subpasses[1], vkDevice);
+    DestroyGeometrySubpass(&pDeferredRenderPass->geometrySubpass, vkDevice);
+    DestroyLightingSubpass(&pDeferredRenderPass->lightingSubpass, vkDevice);
     DestroyVkFramebuffers(pDeferredRenderPass, vkDevice);
     DestroyVkRenderPass(pDeferredRenderPass, vkDevice);
 }
 
-void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
+void RecordDeferredRenderPass(DeferredRenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
 {
     PrepareCurrentFrambuffer(pDeferredRenderPass, frameIndex, swapchainVkImageViews, depthVkImageView, albedoVkImageView, normalVkImageView, viewport.width, viewport.height, vkDevice);
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
@@ -268,11 +264,11 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
 
-    Subpass *pGeometrySubpass = &pDeferredRenderPass->subpasses[0];
+    Subpass *pGeometrySubpass = &pDeferredRenderPass->geometrySubpass;
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
-    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->subpassModelCount; modelIndex++)
+    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->modelCount; modelIndex++)
     {
-        SubpassModel *pSubpassModel = &pGeometrySubpass->subpassModels[modelIndex];
+        SubpassModel *pSubpassModel = &pGeometrySubpass->models[modelIndex];
         if (pSubpassModel->isValid)
         {
             vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
@@ -291,8 +287,8 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
     vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
 
     // lighting subpass
-    Subpass *pLightingSubpass = &pDeferredRenderPass->subpasses[1];
-    SubpassModel *pSubpassModel = &pLightingSubpass->subpassModels[0];
+    Subpass *pLightingSubpass = &pDeferredRenderPass->lightingSubpass;
+    SubpassModel *pSubpassModel = &pLightingSubpass->models[0];
 
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);

commit 5eb640245673ae20275352a01ae59b38b5d72de0
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 29 13:11:19 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index f4ceddc..23f78a7 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -204,16 +204,15 @@ void CreateDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice
 {
     CreateVkRenderPass(pDeferredRenderPass, vkDevice, swapchainVkFormat, depthGraphicImage.vkFormat, albedoGraphicImage.vkFormat, normalGraphicImage.vkFormat);
     CreateVkFramebuffers(pDeferredRenderPass, vkFramebufferCount);
-    uint32_t geometrySubpassIndex = 0;
-    Subpass *pGeometrySubpass = &pDeferredRenderPass->subpasses[geometrySubpassIndex];
-    CreateGeometrySubpass(pDeferredRenderPass, vkDevice, viewport, scissor);
-    CreateLightingSubpass(pDeferredRenderPass, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
+
+    CreateGeometrySubpass(&pDeferredRenderPass->subpasses[0], pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, 0, vkDevice, viewport, scissor);
+    CreateLightingSubpass(&pDeferredRenderPass->subpasses[1], pDeferredRenderPass->shadersPath, pDeferredRenderPass->vkRenderPass, 1, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
 }
 
 void DestroyDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
-    DestroyGeometrySubpass(pDeferredRenderPass, vkDevice);
-    DestroyLightingSubpass(pDeferredRenderPass, vkDevice);
+    DestroyGeometrySubpass(&pDeferredRenderPass->subpasses[0], vkDevice);
+    DestroyLightingSubpass(&pDeferredRenderPass->subpasses[1], vkDevice);
     DestroyVkFramebuffers(pDeferredRenderPass, vkDevice);
     DestroyVkRenderPass(pDeferredRenderPass, vkDevice);
 }
@@ -221,7 +220,6 @@ void DestroyDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevic
 void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
 {
     PrepareCurrentFrambuffer(pDeferredRenderPass, frameIndex, swapchainVkImageViews, depthVkImageView, albedoVkImageView, normalVkImageView, viewport.width, viewport.height, vkDevice);
-    // VkCommandBuffer vkCommandBuffer = pDeferredRenderPass->graphicVkCommandBuffers[pDeferredRenderPass->frameIndex];
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
             .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,

commit 238981b3c86fa58c385845bf04237fb98d71c781
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 29 00:59:35 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 9107c98..f4ceddc 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -1,34 +1,33 @@
 #include <deferredRenderPass.h>
-// static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
-// {
-//     RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
-//     if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
-//     {
-//         VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
-//         VkFramebufferCreateInfo vkFramebufferCreateInfo = {
-//             .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
-//             .pNext = NULL,
-//             .flags = 0,
-//             .renderPass = pDeferredRenderPass->vkRenderPass,
-//             .attachmentCount = 4,
-//             .pAttachments = attachments,
-//             .width = pGraphicEngine->width,
-//             .height = pGraphicEngine->height,
-//             .layers = 1,
-//         };
-//         VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex]);
-//         TryThrowVulkanError(result);
-//     }
-//     else
-//     {
-//         // continue;
-//     }
-// }
-static void CreateVkRenderPass(RenderPass *pDeferredRenderPass)
+static void PrepareCurrentFrambuffer(RenderPass *pDeferredRenderPass, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, uint32_t width, uint32_t height, VkDevice vkDevice)
+{
+    if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[frameIndex])
+    {
+        VkImageView attachments[] = {swapchainVkImageViews[frameIndex], depthVkImageView, albedoVkImageView, normalVkImageView};
+        VkFramebufferCreateInfo vkFramebufferCreateInfo = {
+            .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+            .pNext = NULL,
+            .flags = 0,
+            .renderPass = pDeferredRenderPass->vkRenderPass,
+            .attachmentCount = 4,
+            .pAttachments = attachments,
+            .width = width,
+            .height = height,
+            .layers = 1,
+        };
+        VkResult result = vkCreateFramebuffer(vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[frameIndex]);
+        TryThrowVulkanError(result);
+    }
+    else
+    {
+        // continue;
+    }
+}
+static void CreateVkRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, VkFormat depthVkFormat, VkFormat albedoVkFormat, VkFormat normalVkFormat)
 {
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
-        .format = pDeferredRenderPass->surfaceFormat.format,
+        .format = swapchainVkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_STORE,
@@ -39,7 +38,7 @@ static void CreateVkRenderPass(RenderPass *pDeferredRenderPass)
     };
     VkAttachmentDescription depthAttachmentDescription = {
         .flags = 0,
-        .format = pDeferredRenderPass->depthGraphicImage.vkFormat,
+        .format = depthVkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -50,7 +49,7 @@ static void CreateVkRenderPass(RenderPass *pDeferredRenderPass)
     };
     VkAttachmentDescription albedoAttachmentDescription = {
         .flags = 0,
-        .format = pDeferredRenderPass->albedoGraphicImage.vkFormat,
+        .format = albedoVkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -61,7 +60,7 @@ static void CreateVkRenderPass(RenderPass *pDeferredRenderPass)
     };
     VkAttachmentDescription normalAttachmentDescription = {
         .flags = 0,
-        .format = pDeferredRenderPass->normalGraphicImage.vkFormat,
+        .format = normalVkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -162,30 +161,30 @@ static void CreateVkRenderPass(RenderPass *pDeferredRenderPass)
         .pDependencies = subpassDependencies,
     };
     VkResult result = VK_SUCCESS;
-    result = vkCreateRenderPass(pDeferredRenderPass->vkDevice, &vkRenderPassCreateInfo, NULL, &pDeferredRenderPass->vkRenderPass);
+    result = vkCreateRenderPass(vkDevice, &vkRenderPassCreateInfo, NULL, &pDeferredRenderPass->vkRenderPass);
     TryThrowVulkanError(result);
 
     pDeferredRenderPass->subpassCount = 2;
     pDeferredRenderPass->subpasses = TickernelMalloc(sizeof(Subpass) * pDeferredRenderPass->subpassCount);
 }
 
-static void DestroyVkRenderPass(RenderPass *pDeferredRenderPass)
+static void DestroyVkRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
-    vkDestroyRenderPass(pDeferredRenderPass->vkDevice, pDeferredRenderPass->vkRenderPass, NULL);
+    vkDestroyRenderPass(vkDevice, pDeferredRenderPass->vkRenderPass, NULL);
     TickernelFree(pDeferredRenderPass->subpasses);
 }
 
-static void CreateVkFramebuffers(RenderPass *pDeferredRenderPass)
+static void CreateVkFramebuffers(RenderPass *pDeferredRenderPass, uint32_t vkFramebufferCount)
 {
-    pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pDeferredRenderPass->swapchainImageCount);
-    pDeferredRenderPass->vkFramebufferCount = pDeferredRenderPass->swapchainImageCount;
+    pDeferredRenderPass->vkFramebufferCount = vkFramebufferCount;
+    pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * vkFramebufferCount);
     for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
     {
         pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
     }
 }
 
-static void DestroyVkFramebuffers(RenderPass *pDeferredRenderPass)
+static void DestroyVkFramebuffers(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
     for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
     {
@@ -195,32 +194,33 @@ static void DestroyVkFramebuffers(RenderPass *pDeferredRenderPass)
         }
         else
         {
-            vkDestroyFramebuffer(pDeferredRenderPass->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
+            vkDestroyFramebuffer(vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
         }
     }
     TickernelFree(pDeferredRenderPass->vkFramebuffers);
 }
 
-void CreateDeferredRenderPass(RenderPass *pDeferredRenderPass)
+void CreateDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice, VkFormat swapchainVkFormat, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, GraphicImage normalGraphicImage, uint32_t vkFramebufferCount, VkViewport viewport, VkRect2D scissor, VkBuffer globalUniformBuffer)
 {
-    CreateVkRenderPass(pDeferredRenderPass);
-    CreateVkFramebuffers(pDeferredRenderPass);
+    CreateVkRenderPass(pDeferredRenderPass, vkDevice, swapchainVkFormat, depthGraphicImage.vkFormat, albedoGraphicImage.vkFormat, normalGraphicImage.vkFormat);
+    CreateVkFramebuffers(pDeferredRenderPass, vkFramebufferCount);
     uint32_t geometrySubpassIndex = 0;
     Subpass *pGeometrySubpass = &pDeferredRenderPass->subpasses[geometrySubpassIndex];
-    CreateGeometrySubpass(pDeferredRenderPass);
-    CreateLightingSubpass(pDeferredRenderPass);
+    CreateGeometrySubpass(pDeferredRenderPass, vkDevice, viewport, scissor);
+    CreateLightingSubpass(pDeferredRenderPass, vkDevice, viewport, scissor, globalUniformBuffer, depthGraphicImage.vkImageView, albedoGraphicImage.vkImageView, normalGraphicImage.vkImageView);
 }
 
-void DestroyDeferredRenderPass(RenderPass *pDeferredRenderPass)
+void DestroyDeferredRenderPass(RenderPass *pDeferredRenderPass, VkDevice vkDevice)
 {
-    DestroyGeometrySubpass(pDeferredRenderPass);
-    DestroyLightingSubpass(pDeferredRenderPass);
-    DestroyVkFramebuffers(pDeferredRenderPass);
-    DestroyVkRenderPass(pDeferredRenderPass);
+    DestroyGeometrySubpass(pDeferredRenderPass, vkDevice);
+    DestroyLightingSubpass(pDeferredRenderPass, vkDevice);
+    DestroyVkFramebuffers(pDeferredRenderPass, vkDevice);
+    DestroyVkRenderPass(pDeferredRenderPass, vkDevice);
 }
 
-void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer)
+void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer, VkViewport viewport, VkRect2D scissor, uint32_t frameIndex, VkImageView *swapchainVkImageViews, VkImageView depthVkImageView, VkImageView albedoVkImageView, VkImageView normalVkImageView, VkDevice vkDevice)
 {
+    PrepareCurrentFrambuffer(pDeferredRenderPass, frameIndex, swapchainVkImageViews, depthVkImageView, albedoVkImageView, normalVkImageView, viewport.width, viewport.height, vkDevice);
     // VkCommandBuffer vkCommandBuffer = pDeferredRenderPass->graphicVkCommandBuffers[pDeferredRenderPass->frameIndex];
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
@@ -232,7 +232,7 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
     VkResult result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
     TryThrowVulkanError(result);
 
-    vkCmdSetScissor(vkCommandBuffer, 0, 1, &pDeferredRenderPass->scissor);
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     VkOffset2D offset =
         {
             .x = 0,
@@ -241,7 +241,7 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
     VkRect2D renderArea =
         {
             .offset = offset,
-            .extent = pDeferredRenderPass->scissor.extent,
+            .extent = scissor.extent,
         };
     uint32_t clearValueCount = 4;
     VkClearValue *clearValues = (VkClearValue[]){
@@ -263,7 +263,7 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
             .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
             .pNext = NULL,
             .renderPass = pDeferredRenderPass->vkRenderPass,
-            .framebuffer = pDeferredRenderPass->vkFramebuffers[pDeferredRenderPass->frameIndex],
+            .framebuffer = pDeferredRenderPass->vkFramebuffers[frameIndex],
             .renderArea = renderArea,
             .clearValueCount = clearValueCount,
             .pClearValues = clearValues,
@@ -277,8 +277,8 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
         SubpassModel *pSubpassModel = &pGeometrySubpass->subpassModels[modelIndex];
         if (pSubpassModel->isValid)
         {
-            vkCmdSetViewport(vkCommandBuffer, 0, 1, &pDeferredRenderPass->viewport);
-            vkCmdSetScissor(vkCommandBuffer, 0, 1, &pDeferredRenderPass->scissor);
+            vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+            vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
 
             vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
 
@@ -297,8 +297,8 @@ void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer v
     SubpassModel *pSubpassModel = &pLightingSubpass->subpassModels[0];
 
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
-    vkCmdSetViewport(vkCommandBuffer, 0, 1, &pDeferredRenderPass->viewport);
-    vkCmdSetScissor(vkCommandBuffer, 0, 1, &pDeferredRenderPass->scissor);
+    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
     vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, 1, 0, 0);
 

commit 5dd8699c3ab70f993a531c722620d78c5df6ec75
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Oct 28 18:27:03 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 74666a1..9107c98 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -1,36 +1,34 @@
 #include <deferredRenderPass.h>
-
-static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
-{
-    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
-    if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
-    {
-        VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
-        VkFramebufferCreateInfo vkFramebufferCreateInfo = {
-            .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
-            .pNext = NULL,
-            .flags = 0,
-            .renderPass = pDeferredRenderPass->vkRenderPass,
-            .attachmentCount = 4,
-            .pAttachments = attachments,
-            .width = pGraphicEngine->width,
-            .height = pGraphicEngine->height,
-            .layers = 1,
-        };
-        VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex]);
-        TryThrowVulkanError(result);
-    }
-    else
-    {
-        // continue;
-    }
-}
-
-static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
+// static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
+// {
+//     RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
+//     if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
+//     {
+//         VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
+//         VkFramebufferCreateInfo vkFramebufferCreateInfo = {
+//             .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+//             .pNext = NULL,
+//             .flags = 0,
+//             .renderPass = pDeferredRenderPass->vkRenderPass,
+//             .attachmentCount = 4,
+//             .pAttachments = attachments,
+//             .width = pGraphicEngine->width,
+//             .height = pGraphicEngine->height,
+//             .layers = 1,
+//         };
+//         VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex]);
+//         TryThrowVulkanError(result);
+//     }
+//     else
+//     {
+//         // continue;
+//     }
+// }
+static void CreateVkRenderPass(RenderPass *pDeferredRenderPass)
 {
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
-        .format = pGraphicEngine->surfaceFormat.format,
+        .format = pDeferredRenderPass->surfaceFormat.format,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_STORE,
@@ -41,7 +39,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
     };
     VkAttachmentDescription depthAttachmentDescription = {
         .flags = 0,
-        .format = pGraphicEngine->depthGraphicImage.vkFormat,
+        .format = pDeferredRenderPass->depthGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -52,7 +50,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
     };
     VkAttachmentDescription albedoAttachmentDescription = {
         .flags = 0,
-        .format = pGraphicEngine->albedoGraphicImage.vkFormat,
+        .format = pDeferredRenderPass->albedoGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -63,7 +61,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
     };
     VkAttachmentDescription normalAttachmentDescription = {
         .flags = 0,
-        .format = pGraphicEngine->normalGraphicImage.vkFormat,
+        .format = pDeferredRenderPass->normalGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -164,33 +162,31 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .pDependencies = subpassDependencies,
     };
     VkResult result = VK_SUCCESS;
-    result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPass.vkRenderPass);
+    result = vkCreateRenderPass(pDeferredRenderPass->vkDevice, &vkRenderPassCreateInfo, NULL, &pDeferredRenderPass->vkRenderPass);
     TryThrowVulkanError(result);
 
-    pGraphicEngine->deferredRenderPass.subpassCount = 2;
-    pGraphicEngine->deferredRenderPass.subpasses = TickernelMalloc(sizeof(Subpass) * pGraphicEngine->deferredRenderPass.subpassCount);
+    pDeferredRenderPass->subpassCount = 2;
+    pDeferredRenderPass->subpasses = TickernelMalloc(sizeof(Subpass) * pDeferredRenderPass->subpassCount);
 }
 
-static void DestroyVkRenderPass(GraphicEngine *pGraphicEngine)
+static void DestroyVkRenderPass(RenderPass *pDeferredRenderPass)
 {
-    vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPass.vkRenderPass, NULL);
-    TickernelFree(pGraphicEngine->deferredRenderPass.subpasses);
+    vkDestroyRenderPass(pDeferredRenderPass->vkDevice, pDeferredRenderPass->vkRenderPass, NULL);
+    TickernelFree(pDeferredRenderPass->subpasses);
 }
 
-static void CreateVkFramebuffers(GraphicEngine *pGraphicEngine)
+static void CreateVkFramebuffers(RenderPass *pDeferredRenderPass)
 {
-    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
-    pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pGraphicEngine->swapchainImageCount);
-    pDeferredRenderPass->vkFramebufferCount = pGraphicEngine->swapchainImageCount;
-    for (int32_t i = 0; i < pGraphicEngine->deferredRenderPass.vkFramebufferCount; i++)
+    pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pDeferredRenderPass->swapchainImageCount);
+    pDeferredRenderPass->vkFramebufferCount = pDeferredRenderPass->swapchainImageCount;
+    for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
     {
         pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
     }
 }
 
-static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
+static void DestroyVkFramebuffers(RenderPass *pDeferredRenderPass)
 {
-    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
     for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
     {
         if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[i])
@@ -199,34 +195,33 @@ static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
         }
         else
         {
-            vkDestroyFramebuffer(pGraphicEngine->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
+            vkDestroyFramebuffer(pDeferredRenderPass->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
         }
     }
     TickernelFree(pDeferredRenderPass->vkFramebuffers);
 }
 
-void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
+void CreateDeferredRenderPass(RenderPass *pDeferredRenderPass)
 {
-    CreateVkRenderPass(pGraphicEngine);
-    CreateVkFramebuffers(pGraphicEngine);
-
-    CreateGeometrySubpass(pGraphicEngine);
-    CreateLightingSubpass(pGraphicEngine);
+    CreateVkRenderPass(pDeferredRenderPass);
+    CreateVkFramebuffers(pDeferredRenderPass);
+    uint32_t geometrySubpassIndex = 0;
+    Subpass *pGeometrySubpass = &pDeferredRenderPass->subpasses[geometrySubpassIndex];
+    CreateGeometrySubpass(pDeferredRenderPass);
+    CreateLightingSubpass(pDeferredRenderPass);
 }
 
-void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
+void DestroyDeferredRenderPass(RenderPass *pDeferredRenderPass)
 {
-    DestroyGeometrySubpass(pGraphicEngine);
-    DestroyLightingSubpass(pGraphicEngine);
-    DestroyVkFramebuffers(pGraphicEngine);
-    DestroyVkRenderPass(pGraphicEngine);
+    DestroyGeometrySubpass(pDeferredRenderPass);
+    DestroyLightingSubpass(pDeferredRenderPass);
+    DestroyVkFramebuffers(pDeferredRenderPass);
+    DestroyVkRenderPass(pDeferredRenderPass);
 }
 
-void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
+void RecordDeferredRenderPass(RenderPass *pDeferredRenderPass, VkCommandBuffer vkCommandBuffer)
 {
-    PrepareCurrentFrambuffer(pGraphicEngine);
-
-    VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
+    // VkCommandBuffer vkCommandBuffer = pDeferredRenderPass->graphicVkCommandBuffers[pDeferredRenderPass->frameIndex];
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
             .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
@@ -237,31 +232,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     VkResult result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
     TryThrowVulkanError(result);
 
-    VkViewport viewport =
-        {
-            .x = 0.0f,
-            .y = 0.0f,
-            .width = pGraphicEngine->width,
-            .height = pGraphicEngine->height,
-            .minDepth = 0.0f,
-            .maxDepth = 1.0f,
-        };
-    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-    VkOffset2D scissorOffset =
-        {
-            .x = 0,
-            .y = 0,
-        };
-    VkExtent2D extent = {
-        .width = pGraphicEngine->width,
-        .height = pGraphicEngine->height,
-
-    };
-    VkRect2D scissor = {
-        .offset = scissorOffset,
-        .extent = extent,
-    };
-    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &pDeferredRenderPass->scissor);
     VkOffset2D offset =
         {
             .x = 0,
@@ -270,7 +241,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     VkRect2D renderArea =
         {
             .offset = offset,
-            .extent = extent,
+            .extent = pDeferredRenderPass->scissor.extent,
         };
     uint32_t clearValueCount = 4;
     VkClearValue *clearValues = (VkClearValue[]){
@@ -287,13 +258,12 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .color = {0.0f, 0.0f, 0.0f, 0.0f},
         },
     };
-    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
     VkRenderPassBeginInfo renderPassBeginInfo =
         {
             .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
             .pNext = NULL,
             .renderPass = pDeferredRenderPass->vkRenderPass,
-            .framebuffer = pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex],
+            .framebuffer = pDeferredRenderPass->vkFramebuffers[pDeferredRenderPass->frameIndex],
             .renderArea = renderArea,
             .clearValueCount = clearValueCount,
             .pClearValues = clearValues,
@@ -307,8 +277,8 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
         SubpassModel *pSubpassModel = &pGeometrySubpass->subpassModels[modelIndex];
         if (pSubpassModel->isValid)
         {
-            vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-            vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+            vkCmdSetViewport(vkCommandBuffer, 0, 1, &pDeferredRenderPass->viewport);
+            vkCmdSetScissor(vkCommandBuffer, 0, 1, &pDeferredRenderPass->scissor);
 
             vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
 
@@ -319,7 +289,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
         }
     }
-    
+
     vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
 
     // lighting subpass
@@ -327,8 +297,8 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     SubpassModel *pSubpassModel = &pLightingSubpass->subpassModels[0];
 
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
-    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+    vkCmdSetViewport(vkCommandBuffer, 0, 1, &pDeferredRenderPass->viewport);
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &pDeferredRenderPass->scissor);
     vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
     vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, 1, 0, 0);
 

commit 9b79986ad28d2121548c606a7fac901bf85e065f
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Oct 28 00:57:05 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index d957456..74666a1 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -319,6 +319,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
         }
     }
+    
     vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
 
     // lighting subpass

commit e85cdc7ca91baed5dd6ecfd6d75ae5837206c0eb
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Oct 22 18:13:47 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index e5d8371..d957456 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -325,7 +325,6 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     Subpass *pLightingSubpass = &pDeferredRenderPass->subpasses[1];
     SubpassModel *pSubpassModel = &pLightingSubpass->subpassModels[0];
 
-
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
     vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);

commit 1b052048513396f161a17b45c74acefa78d2df05
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Oct 12 00:28:33 2024 +0800

    Resize window

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 08f2a07..e5d8371 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -3,24 +3,6 @@
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
     RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
-    if (pGraphicEngine->hasRecreatedSwapchain)
-    {
-        UpdateLightingSubpassModel(pGraphicEngine);
-        for (uint32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
-        {
-            if (pDeferredRenderPass->vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
-            {
-                // continue;
-            }
-            else
-            {
-                vkDestroyFramebuffer(pGraphicEngine->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
-                pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
-            }
-        }
-        pGraphicEngine->hasRecreatedSwapchain = false;
-    }
-
     if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
     {
         VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
@@ -243,6 +225,7 @@ void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
 void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
     PrepareCurrentFrambuffer(pGraphicEngine);
+
     VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
@@ -324,6 +307,9 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
         SubpassModel *pSubpassModel = &pGeometrySubpass->subpassModels[modelIndex];
         if (pSubpassModel->isValid)
         {
+            vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+            vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+
             vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
 
             VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
@@ -335,9 +321,14 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     }
     vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
 
+    // lighting subpass
     Subpass *pLightingSubpass = &pDeferredRenderPass->subpasses[1];
     SubpassModel *pSubpassModel = &pLightingSubpass->subpassModels[0];
+
+
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
+    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
     vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, 1, 0, 0);
 

commit 8884929dabb6393c2853e04df1108d041855e21d
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Oct 11 19:51:37 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index a7d755b..08f2a07 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -5,6 +5,7 @@ static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
     RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
     if (pGraphicEngine->hasRecreatedSwapchain)
     {
+        UpdateLightingSubpassModel(pGraphicEngine);
         for (uint32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
         {
             if (pDeferredRenderPass->vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
@@ -17,10 +18,12 @@ static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
                 pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
             }
         }
+        pGraphicEngine->hasRecreatedSwapchain = false;
     }
-    VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
+
     if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
     {
+        VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
         VkFramebufferCreateInfo vkFramebufferCreateInfo = {
             .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
             .pNext = NULL,

commit 070b5bb0bbc21b215676d3eb83bc0583f2be3b04
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 27 18:28:43 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index faec930..a7d755b 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -28,13 +28,17 @@ static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
             .renderPass = pDeferredRenderPass->vkRenderPass,
             .attachmentCount = 4,
             .pAttachments = attachments,
-            .width = pGraphicEngine->swapchainExtent.width,
-            .height = pGraphicEngine->swapchainExtent.height,
+            .width = pGraphicEngine->width,
+            .height = pGraphicEngine->height,
             .layers = 1,
         };
         VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex]);
         TryThrowVulkanError(result);
     }
+    else
+    {
+        // continue;
+    }
 }
 
 static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
@@ -251,8 +255,8 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
         {
             .x = 0.0f,
             .y = 0.0f,
-            .width = pGraphicEngine->swapchainExtent.width,
-            .height = pGraphicEngine->swapchainExtent.height,
+            .width = pGraphicEngine->width,
+            .height = pGraphicEngine->height,
             .minDepth = 0.0f,
             .maxDepth = 1.0f,
         };
@@ -262,11 +266,15 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .x = 0,
             .y = 0,
         };
-    VkRect2D scissor =
-        {
-            .offset = scissorOffset,
-            .extent = pGraphicEngine->swapchainExtent,
-        };
+    VkExtent2D extent = {
+        .width = pGraphicEngine->width,
+        .height = pGraphicEngine->height,
+
+    };
+    VkRect2D scissor = {
+        .offset = scissorOffset,
+        .extent = extent,
+    };
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     VkOffset2D offset =
         {
@@ -276,7 +284,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     VkRect2D renderArea =
         {
             .offset = offset,
-            .extent = pGraphicEngine->swapchainExtent,
+            .extent = extent,
         };
     uint32_t clearValueCount = 4;
     VkClearValue *clearValues = (VkClearValue[]){

commit e537421258cd9ceb038d9e2b6009a9c37f7cba04
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 26 00:43:12 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index e756812..faec930 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -18,8 +18,7 @@ static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
             }
         }
     }
-    uint32_t attachmentCount = 3;
-    VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView};
+    VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView, pGraphicEngine->normalGraphicImage.vkImageView};
     if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
     {
         VkFramebufferCreateInfo vkFramebufferCreateInfo = {
@@ -27,7 +26,7 @@ static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
             .pNext = NULL,
             .flags = 0,
             .renderPass = pDeferredRenderPass->vkRenderPass,
-            .attachmentCount = attachmentCount,
+            .attachmentCount = 4,
             .pAttachments = attachments,
             .width = pGraphicEngine->swapchainExtent.width,
             .height = pGraphicEngine->swapchainExtent.height,
@@ -73,12 +72,23 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
         .finalLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
-
-    uint32_t attachmentCount = 3;
+    VkAttachmentDescription normalAttachmentDescription = {
+        .flags = 0,
+        .format = pGraphicEngine->normalGraphicImage.vkFormat,
+        .samples = VK_SAMPLE_COUNT_1_BIT,
+        .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
+        .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
+        .finalLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
+    };
+    uint32_t attachmentCount = 4;
     VkAttachmentDescription vkAttachmentDescriptions[] = {
         colorAttachmentDescription,
         depthAttachmentDescription,
         albedoAttachmentDescription,
+        normalAttachmentDescription,
     };
 
     VkAttachmentReference geometryDepthAttachmentReference = {
@@ -89,13 +99,18 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .attachment = 2,
         .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
     };
+    VkAttachmentReference geometryNormalAttachmentReference = {
+        .attachment = 3,
+        .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
+    };
+    VkAttachmentReference colorAttachments[] = {geometryAlbedoAttachmentReference, geometryNormalAttachmentReference};
     VkSubpassDescription geometrySubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 0,
         .pInputAttachments = NULL,
-        .colorAttachmentCount = 1,
-        .pColorAttachments = &geometryAlbedoAttachmentReference,
+        .colorAttachmentCount = 2,
+        .pColorAttachments = colorAttachments,
         .pResolveAttachments = NULL,
         .pDepthStencilAttachment = &geometryDepthAttachmentReference,
         .preserveAttachmentCount = 0,
@@ -114,11 +129,15 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .attachment = 2,
         .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
+    VkAttachmentReference lightingNormalAttachmentReference = {
+        .attachment = 3,
+        .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
+    };
     VkSubpassDescription ligthtingSubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
-        .inputAttachmentCount = 2,
-        .pInputAttachments = (const VkAttachmentReference[]){lightingDepthAttachmentReference, lightingAlbedoAttachmentReference},
+        .inputAttachmentCount = 3,
+        .pInputAttachments = (const VkAttachmentReference[]){lightingDepthAttachmentReference, lightingAlbedoAttachmentReference, lightingNormalAttachmentReference},
         .colorAttachmentCount = 1,
         .pColorAttachments = &lightingColorAttachmentReference,
         .pResolveAttachments = NULL,
@@ -259,7 +278,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .offset = offset,
             .extent = pGraphicEngine->swapchainExtent,
         };
-    uint32_t clearValueCount = 3;
+    uint32_t clearValueCount = 4;
     VkClearValue *clearValues = (VkClearValue[]){
         {
             .color = {0.0f, 0.0f, 0.0f, 1.0f},
@@ -269,7 +288,11 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
         },
         {
             .color = {0.0f, 0.0f, 0.0f, 1.0f},
-        }};
+        },
+        {
+            .color = {0.0f, 0.0f, 0.0f, 0.0f},
+        },
+    };
     RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
     VkRenderPassBeginInfo renderPassBeginInfo =
         {

commit b01b69f090a70b0740579ee22c5d1a1122ba70ea
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 23 18:03:20 2024 +0800

    fix memory leak!

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 96d04a4..e756812 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -194,6 +194,7 @@ static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
             vkDestroyFramebuffer(pGraphicEngine->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
         }
     }
+    TickernelFree(pDeferredRenderPass->vkFramebuffers);
 }
 
 void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)

commit 3b6043cc34e1645fd7dc27efdead99dfd88875ec
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 23 01:01:16 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index a4b8f55..96d04a4 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -281,7 +281,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .pClearValues = clearValues,
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    
+
     Subpass *pGeometrySubpass = &pDeferredRenderPass->subpasses[0];
     vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
     for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->subpassModelCount; modelIndex++)

commit 3772d9e570ced7f4beab37eaafb953fb1bc35d08
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Sep 22 02:14:17 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index f56687b..a4b8f55 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -203,27 +203,6 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
 
     CreateGeometrySubpass(pGraphicEngine);
     CreateLightingSubpass(pGraphicEngine);
-
-    uint32_t c = 1000000;
-    GeometrySubpassVertex *geometrySubpassVertices = TickernelMalloc(sizeof(GeometrySubpassVertex) * c);
-    for (uint32_t i = 0; i < 100; i++)
-    {
-        for (uint32_t j = 0; j < 100; j++)
-        {
-            for (uint32_t k = 0; k < 100; k++)
-            {
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].position[0] = i * 1.0f - 50.0f;
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].position[1] = j * 1.0f - 50.0f;
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].position[2] = k * 1.0f - 50.0f;
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[0] = i * 0.01f;
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[1] = j * 0.01f;
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[2] = k * 0.01f;
-                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[3] = 1.0f;
-            }
-        }
-    }
-    uint32_t a;
-    AddModelToGeometrySubpass(pGraphicEngine, c, geometrySubpassVertices, &a);
 }
 
 void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)

commit 8e129f2af601c8b9afa3b3197399c564532bb615
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Sep 22 01:41:38 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 89b6bf4..f56687b 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -204,13 +204,6 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
     CreateGeometrySubpass(pGraphicEngine);
     CreateLightingSubpass(pGraphicEngine);
 
-    LightingSubpassVertex lightingSubpassVertices[] = {
-        {0, 0, 0},
-        {0, 1, 0},
-        {1, 0, 0},
-    };
-    AddModelToLightingSubpass(pGraphicEngine, 3, lightingSubpassVertices, &pGraphicEngine->fullScreenTriangleModelIndex);
-
     uint32_t c = 1000000;
     GeometrySubpassVertex *geometrySubpassVertices = TickernelMalloc(sizeof(GeometrySubpassVertex) * c);
     for (uint32_t i = 0; i < 100; i++)
@@ -235,7 +228,6 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
 
 void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
-    RemoveModelFromLightingSubpass(pGraphicEngine, pGraphicEngine->fullScreenTriangleModelIndex);
     DestroyGeometrySubpass(pGraphicEngine);
     DestroyLightingSubpass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
@@ -310,35 +302,31 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .pClearValues = clearValues,
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    for (uint32_t subpassIndex = 0; subpassIndex < pDeferredRenderPass->subpassCount; subpassIndex++)
+    
+    Subpass *pGeometrySubpass = &pDeferredRenderPass->subpasses[0];
+    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipeline);
+    for (uint32_t modelIndex = 0; modelIndex < pGeometrySubpass->subpassModelCount; modelIndex++)
     {
-        Subpass *pSubpass = &pDeferredRenderPass->subpasses[subpassIndex];
-
-        vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipeline);
-        uint32_t geometryPipelineIndex = 0;
-        for (uint32_t modelIndex = 0; modelIndex < pSubpass->subpassModelCount; modelIndex++)
+        SubpassModel *pSubpassModel = &pGeometrySubpass->subpassModels[modelIndex];
+        if (pSubpassModel->isValid)
         {
-            SubpassModel *pSubpassModel = &pSubpass->subpassModels[modelIndex];
-            if (pSubpassModel->isValid)
-            {
-                vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGeometrySubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
 
-                VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
-                VkDeviceSize offsets[] = {0};
-                vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-                uint32_t vertexCount = pSubpassModel->vertexCount;
-                vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
-            }
-        }
-        if (subpassIndex < pDeferredRenderPass->subpassCount - 1)
-        {
-            vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
-        }
-        else
-        {
-            // Finial subpass;
+            VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
+            VkDeviceSize offsets[] = {0};
+            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+            uint32_t vertexCount = pSubpassModel->vertexCount;
+            vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
         }
     }
+    vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
+
+    Subpass *pLightingSubpass = &pDeferredRenderPass->subpasses[1];
+    SubpassModel *pSubpassModel = &pLightingSubpass->subpassModels[0];
+    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipeline);
+    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pLightingSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+    vkCmdDraw(vkCommandBuffer, pSubpassModel->vertexCount, 1, 0, 0);
+
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);

commit 5defa3fc4160ad342d3d414433f4d27845e276bd
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Sep 21 03:16:07 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 69a6b55..89b6bf4 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -66,7 +66,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .flags = 0,
         .format = pGraphicEngine->albedoGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
-        .loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
         .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
         .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -206,16 +206,31 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
 
     LightingSubpassVertex lightingSubpassVertices[] = {
         {0, 0, 0},
-        {0, 0, 0},
-        {0, 0, 0},
+        {0, 1, 0},
+        {1, 0, 0},
     };
     AddModelToLightingSubpass(pGraphicEngine, 3, lightingSubpassVertices, &pGraphicEngine->fullScreenTriangleModelIndex);
-    GeometrySubpassVertex geometrySubpassVertices[] = {
-        {0, 0, 0},
 
-    };
+    uint32_t c = 1000000;
+    GeometrySubpassVertex *geometrySubpassVertices = TickernelMalloc(sizeof(GeometrySubpassVertex) * c);
+    for (uint32_t i = 0; i < 100; i++)
+    {
+        for (uint32_t j = 0; j < 100; j++)
+        {
+            for (uint32_t k = 0; k < 100; k++)
+            {
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].position[0] = i * 1.0f - 50.0f;
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].position[1] = j * 1.0f - 50.0f;
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].position[2] = k * 1.0f - 50.0f;
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[0] = i * 0.01f;
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[1] = j * 0.01f;
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[2] = k * 0.01f;
+                geometrySubpassVertices[i * 10000 + j * 100 + k * 1].color[3] = 1.0f;
+            }
+        }
+    }
     uint32_t a;
-    AddModelToGeometrySubpass(pGraphicEngine, 1, geometrySubpassVertices, &a);
+    AddModelToGeometrySubpass(pGraphicEngine, c, geometrySubpassVertices, &a);
 }
 
 void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
@@ -272,15 +287,17 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .offset = offset,
             .extent = pGraphicEngine->swapchainExtent,
         };
-    uint32_t clearValueCount = 2;
+    uint32_t clearValueCount = 3;
     VkClearValue *clearValues = (VkClearValue[]){
         {
-            .color = {0.0f, 0.382f, 0.382f, 1.0f},
+            .color = {0.0f, 0.0f, 0.0f, 1.0f},
         },
         {
             .depthStencil = {1.0f, 0},
         },
-    };
+        {
+            .color = {0.0f, 0.0f, 0.0f, 1.0f},
+        }};
     RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
     VkRenderPassBeginInfo renderPassBeginInfo =
         {

commit 18e9821d8023dda3eee174e4474ccb27a752eec7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 19 17:31:15 2024 +0800

    Remove model group.

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 355d51d..69a6b55 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -209,18 +209,18 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
         {0, 0, 0},
         {0, 0, 0},
     };
-    AddModelToLightingSubpass(pGraphicEngine, 3, lightingSubpassVertices, &pGraphicEngine->fullScreenVerticesGroupIndex, &pGraphicEngine->fullScreenVerticesModelIndex);
+    AddModelToLightingSubpass(pGraphicEngine, 3, lightingSubpassVertices, &pGraphicEngine->fullScreenTriangleModelIndex);
     GeometrySubpassVertex geometrySubpassVertices[] = {
         {0, 0, 0},
 
     };
-    uint32_t a, b;
-    AddModelToGeometrySubpass(pGraphicEngine, 1, geometrySubpassVertices, &a, &b);
+    uint32_t a;
+    AddModelToGeometrySubpass(pGraphicEngine, 1, geometrySubpassVertices, &a);
 }
 
 void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
-    RemoveModelFromLightingSubpass(pGraphicEngine, pGraphicEngine->fullScreenVerticesGroupIndex, pGraphicEngine->fullScreenVerticesModelIndex);
+    RemoveModelFromLightingSubpass(pGraphicEngine, pGraphicEngine->fullScreenTriangleModelIndex);
     DestroyGeometrySubpass(pGraphicEngine);
     DestroyLightingSubpass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
@@ -299,22 +299,18 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
 
         vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipeline);
         uint32_t geometryPipelineIndex = 0;
-        for (uint32_t modelGroupIndex = 0; modelGroupIndex < pSubpass->modelGroupCount; modelGroupIndex++)
+        for (uint32_t modelIndex = 0; modelIndex < pSubpass->subpassModelCount; modelIndex++)
         {
-            ModelGroup *pModelGroup = &pSubpass->modelGroups[modelGroupIndex];
-            for (uint32_t modelIndex = 0; modelIndex < pModelGroup->modelCount; modelIndex++)
+            SubpassModel *pSubpassModel = &pSubpass->subpassModels[modelIndex];
+            if (pSubpassModel->isValid)
             {
-                SubpassModel *pSubpassModel = &pModelGroup->subpassModels[modelGroupIndex];
-                if (pSubpassModel->isValid)
-                {
-                    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+                vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
 
-                    VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
-                    VkDeviceSize offsets[] = {0};
-                    vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-                    uint32_t vertexCount = pSubpassModel->vertexCount;
-                    vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
-                }
+                VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
+                VkDeviceSize offsets[] = {0};
+                vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+                uint32_t vertexCount = pSubpassModel->vertexCount;
+                vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
             }
         }
         if (subpassIndex < pDeferredRenderPass->subpassCount - 1)

commit 59d87cc8189c0b78e4e449678bd322c5b6d51b62
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 19 00:22:13 2024 +0800

    Fix bugs!

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 8be0996..355d51d 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -44,7 +44,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .flags = 0,
         .format = pGraphicEngine->surfaceFormat.format,
         .samples = VK_SAMPLE_COUNT_1_BIT,
-        .loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_STORE,
         .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
         .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -275,7 +275,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     uint32_t clearValueCount = 2;
     VkClearValue *clearValues = (VkClearValue[]){
         {
-            .color = {1.0f, 0.0f, 0.0f, 1.0f},
+            .color = {0.0f, 0.382f, 0.382f, 1.0f},
         },
         {
             .depthStencil = {1.0f, 0},

commit 1dc138bc2bbba3e3dfaa7f99da21d3a4bce0ef7c
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 23:31:27 2024 +0800

    Fix bugs!

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index f50ae71..8be0996 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -102,34 +102,34 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .pPreserveAttachments = NULL,
     };
 
-    VkAttachmentReference lightColorAttachmentReference = {
+    VkAttachmentReference lightingColorAttachmentReference = {
         .attachment = 0,
         .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
     };
-    VkAttachmentReference lightDepthAttachmentReference = {
+    VkAttachmentReference lightingDepthAttachmentReference = {
         .attachment = 1,
         .layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
     };
-    VkAttachmentReference lightAlbedoAttachmentReference = {
+    VkAttachmentReference lightingAlbedoAttachmentReference = {
         .attachment = 2,
         .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
     };
-    VkSubpassDescription ligthSubpassDescription = {
+    VkSubpassDescription ligthtingSubpassDescription = {
         .flags = 0,
         .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
         .inputAttachmentCount = 2,
-        .pInputAttachments = (const VkAttachmentReference[]){lightDepthAttachmentReference, lightAlbedoAttachmentReference},
+        .pInputAttachments = (const VkAttachmentReference[]){lightingDepthAttachmentReference, lightingAlbedoAttachmentReference},
         .colorAttachmentCount = 1,
-        .pColorAttachments = &lightColorAttachmentReference,
+        .pColorAttachments = &lightingColorAttachmentReference,
         .pResolveAttachments = NULL,
-        .pDepthStencilAttachment = &geometryDepthAttachmentReference,
+        .pDepthStencilAttachment = NULL,
         .preserveAttachmentCount = 0,
         .pPreserveAttachments = NULL,
     };
     uint32_t subpassCount = 2;
     VkSubpassDescription vkSubpassDescriptions[] = {
         geometrySubpassDescription,
-        ligthSubpassDescription,
+        ligthtingSubpassDescription,
     };
     uint32_t dependencyCount = subpassCount - 1;
     VkSubpassDependency subpassDependencies[dependencyCount];
@@ -275,7 +275,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     uint32_t clearValueCount = 2;
     VkClearValue *clearValues = (VkClearValue[]){
         {
-            .color = {0.0f, 0.0f, 0.0f, 1.0f},
+            .color = {1.0f, 0.0f, 0.0f, 1.0f},
         },
         {
             .depthStencil = {1.0f, 0},

commit 00970ac1b54cda036a74e77cc349c83313eff964
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 22:48:53 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index fe19963..f50ae71 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -60,7 +60,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
         .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
-        .finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
+        .finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
     };
     VkAttachmentDescription albedoAttachmentDescription = {
         .flags = 0,

commit d056ac391bd237d94e0740fcd7a185b5164eac8a
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 17:15:15 2024 +0800

    Fix bugs

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index f50ae71..fe19963 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -60,7 +60,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
         .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
-        .finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
+        .finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
     };
     VkAttachmentDescription albedoAttachmentDescription = {
         .flags = 0,

commit a436025c15f2425ecd4c915893e0a19b7195c66c
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 18 15:10:09 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index 5161989..f50ae71 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -240,6 +240,28 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
         };
     VkResult result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
     TryThrowVulkanError(result);
+
+    VkViewport viewport =
+        {
+            .x = 0.0f,
+            .y = 0.0f,
+            .width = pGraphicEngine->swapchainExtent.width,
+            .height = pGraphicEngine->swapchainExtent.height,
+            .minDepth = 0.0f,
+            .maxDepth = 1.0f,
+        };
+    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+    VkOffset2D scissorOffset =
+        {
+            .x = 0,
+            .y = 0,
+        };
+    VkRect2D scissor =
+        {
+            .offset = scissorOffset,
+            .extent = pGraphicEngine->swapchainExtent,
+        };
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
     VkOffset2D offset =
         {
             .x = 0,
@@ -274,6 +296,7 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
     for (uint32_t subpassIndex = 0; subpassIndex < pDeferredRenderPass->subpassCount; subpassIndex++)
     {
         Subpass *pSubpass = &pDeferredRenderPass->subpasses[subpassIndex];
+
         vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipeline);
         uint32_t geometryPipelineIndex = 0;
         for (uint32_t modelGroupIndex = 0; modelGroupIndex < pSubpass->modelGroupCount; modelGroupIndex++)
@@ -282,14 +305,26 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             for (uint32_t modelIndex = 0; modelIndex < pModelGroup->modelCount; modelIndex++)
             {
                 SubpassModel *pSubpassModel = &pModelGroup->subpassModels[modelGroupIndex];
-                vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
-                VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
-                VkDeviceSize offsets[] = {0};
-                vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-                uint32_t vertexCount = pSubpassModel->vertexCount;
-                vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+                if (pSubpassModel->isValid)
+                {
+                    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+
+                    VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
+                    VkDeviceSize offsets[] = {0};
+                    vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+                    uint32_t vertexCount = pSubpassModel->vertexCount;
+                    vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+                }
             }
         }
+        if (subpassIndex < pDeferredRenderPass->subpassCount - 1)
+        {
+            vkCmdNextSubpass(vkCommandBuffer, VK_SUBPASS_CONTENTS_INLINE);
+        }
+        else
+        {
+            // Finial subpass;
+        }
     }
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);

commit db27f52e1272eeefcd0525e9defe32a26b63c513
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Sep 17 20:04:56 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index eee8ebb..5161989 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -203,10 +203,24 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
 
     CreateGeometrySubpass(pGraphicEngine);
     CreateLightingSubpass(pGraphicEngine);
+
+    LightingSubpassVertex lightingSubpassVertices[] = {
+        {0, 0, 0},
+        {0, 0, 0},
+        {0, 0, 0},
+    };
+    AddModelToLightingSubpass(pGraphicEngine, 3, lightingSubpassVertices, &pGraphicEngine->fullScreenVerticesGroupIndex, &pGraphicEngine->fullScreenVerticesModelIndex);
+    GeometrySubpassVertex geometrySubpassVertices[] = {
+        {0, 0, 0},
+
+    };
+    uint32_t a, b;
+    AddModelToGeometrySubpass(pGraphicEngine, 1, geometrySubpassVertices, &a, &b);
 }
 
 void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
+    RemoveModelFromLightingSubpass(pGraphicEngine, pGraphicEngine->fullScreenVerticesGroupIndex, pGraphicEngine->fullScreenVerticesModelIndex);
     DestroyGeometrySubpass(pGraphicEngine);
     DestroyLightingSubpass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);

commit 46f5a4dd925722eec3c26a53d0fb37a4bcfde5b7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Sep 17 01:36:10 2024 +0800

    Update

diff --git a/src/deferredRenderPass.c b/src/deferredRenderPass.c
index b0f79bc..eee8ebb 100644
--- a/src/deferredRenderPass.c
+++ b/src/deferredRenderPass.c
@@ -158,11 +158,15 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
     VkResult result = VK_SUCCESS;
     result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPass.vkRenderPass);
     TryThrowVulkanError(result);
+
+    pGraphicEngine->deferredRenderPass.subpassCount = 2;
+    pGraphicEngine->deferredRenderPass.subpasses = TickernelMalloc(sizeof(Subpass) * pGraphicEngine->deferredRenderPass.subpassCount);
 }
 
 static void DestroyVkRenderPass(GraphicEngine *pGraphicEngine)
 {
     vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPass.vkRenderPass, NULL);
+    TickernelFree(pGraphicEngine->deferredRenderPass.subpasses);
 }
 
 static void CreateVkFramebuffers(GraphicEngine *pGraphicEngine)
@@ -196,6 +200,7 @@ void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
+
     CreateGeometrySubpass(pGraphicEngine);
     CreateLightingSubpass(pGraphicEngine);
 }
@@ -252,20 +257,24 @@ void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
             .pClearValues = clearValues,
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    for (uint32_t i = 0; i < pDeferredRenderPass->subpassCount; i++)
+    for (uint32_t subpassIndex = 0; subpassIndex < pDeferredRenderPass->subpassCount; subpassIndex++)
     {
-        Subpass *pSubpass = &pDeferredRenderPass->subpasses[i];
+        Subpass *pSubpass = &pDeferredRenderPass->subpasses[subpassIndex];
         vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipeline);
         uint32_t geometryPipelineIndex = 0;
-        for (uint32_t i = 0; i < pSubpass->modelCount; i++)
+        for (uint32_t modelGroupIndex = 0; modelGroupIndex < pSubpass->modelGroupCount; modelGroupIndex++)
         {
-            SubpassModel *pSubpassModel = &pSubpass->subpassModels[i];
-            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
-            VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
-            VkDeviceSize offsets[] = {0};
-            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-            uint32_t vertexCount = pSubpassModel->vertexCount;
-            vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+            ModelGroup *pModelGroup = &pSubpass->modelGroups[modelGroupIndex];
+            for (uint32_t modelIndex = 0; modelIndex < pModelGroup->modelCount; modelIndex++)
+            {
+                SubpassModel *pSubpassModel = &pModelGroup->subpassModels[modelGroupIndex];
+                vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+                VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
+                VkDeviceSize offsets[] = {0};
+                vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+                uint32_t vertexCount = pSubpassModel->vertexCount;
+                vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+            }
         }
     }
     vkCmdEndRenderPass(vkCommandBuffer);

commit c730c5e3aa99ffe154bc68a36f74ab7882a13151
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Sep 14 18:01:11 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPass.c
similarity index 74%
rename from src/deferredRenderPipeline.c
rename to src/deferredRenderPass.c
index 8162523..b0f79bc 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPass.c
@@ -1,4 +1,4 @@
-#include <deferredRenderPipeline.h>
+#include <deferredRenderPass.h>
 
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
@@ -192,81 +192,23 @@ static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
     }
 }
 
-static void CreateDescriptorPool(GraphicEngine *pGraphicEngine)
-{
-    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
-    uint32_t descriptorCount = 0;
-    for (uint32_t i = 0; i < pDeferredRenderPass->subpassCount; i++)
-    {
-        Subpass subpass = pDeferredRenderPass->subpasses[i];
-        descriptorCount += subpass.maxObjectCount;
-    }
-
-    VkDescriptorPoolSize poolSize[] = {
-        {
-            .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = descriptorCount,
-        }};
-    VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .maxSets = descriptorCount,
-        .poolSizeCount = 1,
-        .pPoolSizes = poolSize,
-    };
-    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPass.vkDescriptorPool);
-    TryThrowVulkanError(result);
-}
-
-static void DestroyDescriptorPool(GraphicEngine *pGraphicEngine)
-{
-    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPass.vkDescriptorPool, NULL);
-}
-static void CreateSubpasses(GraphicEngine *pGraphicEngine)
-{
-    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
-    pDeferredRenderPass->subpassCount = 2;
-    pDeferredRenderPass->subpasses = TickernelMalloc(sizeof(Subpass) * pDeferredRenderPass->subpassCount);
-
-    // pGraphicEngine->deferredRenderPass.vkPipelineCount = 2;
-    // pGraphicEngine->deferredRenderPass.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPass.vkPipelineCount);
-    // pGraphicEngine->deferredRenderPass.vkPipelineToLayout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPass.vkPipelineCount);
-    // pGraphicEngine->deferredRenderPass.vkPipelineToDescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPass.vkPipelineCount);
-
-    // pGraphicEngine->deferredRenderPass.maxObjectCount = 4096;
-    // pGraphicEngine->deferredRenderPass.renderPipelineObjects = TickernelMalloc(sizeof(RenderPipelineObject) * pGraphicEngine->deferredRenderPass.maxObjectCount);
-    CreateDescriptorPool(pGraphicEngine);
-    CreateGeometryPipeline(pGraphicEngine);
-    CreateLightingPipeline(pGraphicEngine);
-}
-
-static void DestroySubpasses(GraphicEngine *pGraphicEngine)
-{
-    DestroyGeometryPipeline(pGraphicEngine);
-    DestroyLightingPipeline(pGraphicEngine);
-    DestroyDescriptorPool(pGraphicEngine);
-    // TickernelFree(pGraphicEngine->deferredRenderPass.renderPipelineObjects);
-    // TickernelFree(pGraphicEngine->deferredRenderPass.vkPipelineToLayout);
-    // TickernelFree(pGraphicEngine->deferredRenderPass.vkPipelineToDescriptorSetLayout);
-    TickernelFree(pGraphicEngine->deferredRenderPass.subpasses);
-}
-
-void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+void CreateDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
-    CreateSubpasses(pGraphicEngine);
+    CreateGeometrySubpass(pGraphicEngine);
+    CreateLightingSubpass(pGraphicEngine);
 }
 
-void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+void DestroyDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
-    DestroySubpasses(pGraphicEngine);
+    DestroyGeometrySubpass(pGraphicEngine);
+    DestroyLightingSubpass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
     DestroyVkRenderPass(pGraphicEngine);
 }
 
-void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+void RecordDeferredRenderPass(GraphicEngine *pGraphicEngine)
 {
     PrepareCurrentFrambuffer(pGraphicEngine);
     VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
@@ -315,18 +257,17 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
         Subpass *pSubpass = &pDeferredRenderPass->subpasses[i];
         vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipeline);
         uint32_t geometryPipelineIndex = 0;
-        for (uint32_t i = 0; i < pSubpass->objectCount; i++)
+        for (uint32_t i = 0; i < pSubpass->modelCount; i++)
         {
-            RenderPipelineObject *pRenderPipelineObject = &pSubpass->renderPipelineObjects[i];
-            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pRenderPipelineObject->vkDescriptorSet, 0, NULL);
-            VkBuffer vertexBuffers[] = {pRenderPipelineObject->vertexBuffer};
+            SubpassModel *pSubpassModel = &pSubpass->subpassModels[i];
+            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pSubpassModel->vkDescriptorSet, 0, NULL);
+            VkBuffer vertexBuffers[] = {pSubpassModel->vertexBuffer};
             VkDeviceSize offsets[] = {0};
             vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-            uint32_t vertexCount = pRenderPipelineObject->vertexCount;
+            uint32_t vertexCount = pSubpassModel->vertexCount;
             vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
         }
     }
-
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);

commit 9452747870c02fa88e6a380acc442dfdb4057f11
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sat Sep 14 01:10:45 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 8faaf0c..8162523 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -2,22 +2,38 @@
 
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
+    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
+    if (pGraphicEngine->hasRecreatedSwapchain)
+    {
+        for (uint32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
+        {
+            if (pDeferredRenderPass->vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
+            {
+                // continue;
+            }
+            else
+            {
+                vkDestroyFramebuffer(pGraphicEngine->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
+                pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
+            }
+        }
+    }
     uint32_t attachmentCount = 3;
     VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView};
-    if (INVALID_VKFRAMEBUFFER == pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex])
+    if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex])
     {
         VkFramebufferCreateInfo vkFramebufferCreateInfo = {
             .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
             .pNext = NULL,
             .flags = 0,
-            .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
+            .renderPass = pDeferredRenderPass->vkRenderPass,
             .attachmentCount = attachmentCount,
             .pAttachments = attachments,
             .width = pGraphicEngine->swapchainExtent.width,
             .height = pGraphicEngine->swapchainExtent.height,
             .layers = 1,
         };
-        VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex]);
+        VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex]);
         TryThrowVulkanError(result);
     }
 }
@@ -140,623 +156,119 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
         .pDependencies = subpassDependencies,
     };
     VkResult result = VK_SUCCESS;
-    result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkRenderPass);
+    result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPass.vkRenderPass);
     TryThrowVulkanError(result);
 }
+
 static void DestroyVkRenderPass(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkRenderPass, NULL);
+    vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPass.vkRenderPass, NULL);
 }
 
 static void CreateVkFramebuffers(GraphicEngine *pGraphicEngine)
 {
-    pGraphicEngine->deferredRenderPipeline.vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pGraphicEngine->swapchainImageCount);
-    pGraphicEngine->deferredRenderPipeline.vkFramebufferCount = pGraphicEngine->swapchainImageCount;
-    for (int32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
+    pDeferredRenderPass->vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pGraphicEngine->swapchainImageCount);
+    pDeferredRenderPass->vkFramebufferCount = pGraphicEngine->swapchainImageCount;
+    for (int32_t i = 0; i < pGraphicEngine->deferredRenderPass.vkFramebufferCount; i++)
     {
-        pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
+        pDeferredRenderPass->vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
     }
 }
+
 static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
 {
-    for (int32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
+    for (int32_t i = 0; i < pDeferredRenderPass->vkFramebufferCount; i++)
     {
-        if (INVALID_VKFRAMEBUFFER == pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i])
+        if (INVALID_VKFRAMEBUFFER == pDeferredRenderPass->vkFramebuffers[i])
         {
             // continue;
         }
         else
         {
-            vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
+            vkDestroyFramebuffer(pGraphicEngine->vkDevice, pDeferredRenderPass->vkFramebuffers[i], NULL);
         }
     }
 }
 
-static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
-{
-    VkResult result = VK_SUCCESS;
-    VkShaderModule geometryVertShaderModule;
-    CreateVkShaderModule(pGraphicEngine, "../shaders/geometry.vert", &geometryVertShaderModule);
-    VkPipelineShaderStageCreateInfo vertShaderStageCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .stage = VK_SHADER_STAGE_VERTEX_BIT,
-        .module = geometryVertShaderModule,
-        .pName = "main",
-        .pSpecializationInfo = NULL,
-    };
-
-    VkShaderModule geometryFragShaderModule;
-    CreateVkShaderModule(pGraphicEngine, "../shaders/geometry.frag", &geometryFragShaderModule);
-    VkPipelineShaderStageCreateInfo fragShaderStageCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .stage = VK_SHADER_STAGE_FRAGMENT_BIT,
-        .module = geometryFragShaderModule,
-        .pName = "main",
-        .pSpecializationInfo = NULL,
-    };
-    uint32_t stageCount = 2;
-    VkPipelineShaderStageCreateInfo *pipelineShaderStageCreateInfos = (VkPipelineShaderStageCreateInfo[]){vertShaderStageCreateInfo, fragShaderStageCreateInfo};
-
-    uint32_t vertexBindingDescriptionCount = 1;
-    VkVertexInputBindingDescription *vertexBindingDescriptions = (VkVertexInputBindingDescription[]){
-        {
-            .binding = 0,
-            .stride = sizeof(DeferredRenderPipelineVertex),
-            .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
-        },
-    };
-    uint32_t vertexAttributeDescriptionCount = 3;
-    VkVertexInputAttributeDescription vertexAttributeDescriptions[] = {
-        {
-            .location = 0,
-            .binding = 0,
-            .format = VK_FORMAT_R32G32B32_SFLOAT,
-            .offset = offsetof(DeferredRenderPipelineVertex, position),
-        },
-        {
-            .location = 1,
-            .binding = 0,
-            .format = VK_FORMAT_R32G32B32_SFLOAT,
-            .offset = offsetof(DeferredRenderPipelineVertex, color),
-        }};
-    VkPipelineVertexInputStateCreateInfo vkPipelineVertexInputStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .vertexBindingDescriptionCount = vertexBindingDescriptionCount,
-        .pVertexBindingDescriptions = vertexBindingDescriptions,
-        .vertexAttributeDescriptionCount = vertexAttributeDescriptionCount,
-        .pVertexAttributeDescriptions = vertexAttributeDescriptions,
-    };
-    VkPipelineInputAssemblyStateCreateInfo pipelineInputAssemblyStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
-        .primitiveRestartEnable = VK_FALSE,
-    };
-    VkViewport viewport = {
-        .x = 0.0f,
-        .y = 0.0f,
-        .width = pGraphicEngine->swapchainExtent.width,
-        .height = pGraphicEngine->swapchainExtent.height,
-        .minDepth = 0.0f,
-        .maxDepth = 1.0f,
-    };
-    VkOffset2D offset = {
-        .x = 0,
-        .y = 0,
-    };
-    VkRect2D scissor = {
-        .offset = offset,
-        .extent = pGraphicEngine->swapchainExtent,
-    };
-    VkPipelineViewportStateCreateInfo pipelineViewportStateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .viewportCount = 1,
-        .pViewports = &viewport,
-        .scissorCount = 1,
-        .pScissors = &scissor,
-    };
-    VkPipelineRasterizationStateCreateInfo pipelineRasterizationStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .rasterizerDiscardEnable = VK_FALSE,
-        .polygonMode = VK_POLYGON_MODE_POINT,
-        .cullMode = VK_CULL_MODE_NONE,
-        .frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE,
-        .depthBiasEnable = VK_FALSE,
-        .depthBiasConstantFactor = 0,
-        .depthBiasClamp = VK_FALSE,
-        .depthBiasSlopeFactor = 0,
-        .lineWidth = 1.0f,
-    };
-    VkPipelineDepthStencilStateCreateInfo pipelineDepthStencilStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .depthTestEnable = VK_TRUE,
-        .depthWriteEnable = VK_TRUE,
-        .depthCompareOp = VK_COMPARE_OP_LESS,
-        .depthBoundsTestEnable = VK_FALSE,
-        .stencilTestEnable = VK_FALSE,
-        .front = {},
-        .back = {},
-        .minDepthBounds = 0,
-        .maxDepthBounds = 1,
-    };
-    VkPipelineColorBlendAttachmentState pipelineColorBlendAttachmentState = {
-        .blendEnable = VK_TRUE,
-        .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
-        .dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
-        .colorBlendOp = VK_BLEND_OP_ADD,
-        .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
-        .dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO,
-        .alphaBlendOp = VK_BLEND_OP_ADD,
-        .colorWriteMask = VK_COLOR_COMPONENT_A_BIT | VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT,
-    };
-    VkPipelineColorBlendStateCreateInfo colorBlendStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .logicOpEnable = VK_FALSE,
-        .logicOp = VK_LOGIC_OP_COPY,
-        .attachmentCount = 1,
-        .pAttachments = &pipelineColorBlendAttachmentState,
-        .blendConstants[0] = 0.0f,
-        .blendConstants[1] = 0.0f,
-        .blendConstants[2] = 0.0f,
-        .blendConstants[3] = 0.0f,
-    };
-    uint32_t dynamicStateCount = 2;
-    VkDynamicState dynamicStates[] = {
-        VK_DYNAMIC_STATE_VIEWPORT,
-        VK_DYNAMIC_STATE_SCISSOR,
-    };
-    VkPipelineDynamicStateCreateInfo dynamicState = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .dynamicStateCount = dynamicStateCount,
-        .pDynamicStates = dynamicStates,
-    };
-
-    VkDescriptorSetLayoutBinding globalUniformLayoutBinding = {
-        .binding = 0,
-        .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-        .descriptorCount = 1,
-        .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
-        .pImmutableSamplers = NULL,
-    };
-    VkDescriptorSetLayoutBinding objectUniformLayoutBinding = {
-        .binding = 1,
-        .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-        .descriptorCount = 1,
-        .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
-        .pImmutableSamplers = NULL,
-    };
-    TryThrowVulkanError(result);
-    VkDescriptorSetLayoutBinding *bindings = (VkDescriptorSetLayoutBinding[]){globalUniformLayoutBinding, objectUniformLayoutBinding};
-    VkDescriptorSetLayoutCreateInfo descriptorSetLayoutCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .bindingCount = 2,
-        .pBindings = bindings,
-    };
-    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0]);
-    VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .setLayoutCount = 1,
-        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0],
-        .pushConstantRangeCount = 0,
-        .pPushConstantRanges = NULL,
-    };
-
-    result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[0]);
-    TryThrowVulkanError(result);
-    VkGraphicsPipelineCreateInfo geometryPipelineCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .stageCount = stageCount,
-        .pStages = pipelineShaderStageCreateInfos,
-        .pVertexInputState = &vkPipelineVertexInputStateCreateInfo,
-        .pInputAssemblyState = &pipelineInputAssemblyStateCreateInfo,
-        .pTessellationState = NULL,
-        .pViewportState = &pipelineViewportStateInfo,
-        .pRasterizationState = &pipelineRasterizationStateCreateInfo,
-        .pMultisampleState = NULL,
-        .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
-        .pColorBlendState = &colorBlendStateCreateInfo,
-        .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[0],
-        .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
-        .subpass = 0,
-        .basePipelineHandle = VK_NULL_HANDLE,
-        .basePipelineIndex = 0,
-    };
-
-    VkPipelineCache pipelineCache = NULL;
-    result = vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, 1, &geometryPipelineCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
-    TryThrowVulkanError(result);
-    DestroyVkShaderModule(pGraphicEngine, geometryVertShaderModule);
-    DestroyVkShaderModule(pGraphicEngine, geometryFragShaderModule);
-}
-static void DestroyGeometryPipeline(GraphicEngine *pGraphicEngine)
-{
-    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0], NULL);
-    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[0], NULL);
-    vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[0], NULL);
-}
-static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
-{
-    VkResult result = VK_SUCCESS;
-    VkShaderModule lightingVertShaderModule;
-    CreateVkShaderModule(pGraphicEngine, "../shaders/lighting.vert", &lightingVertShaderModule);
-    VkPipelineShaderStageCreateInfo vertShaderStageCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .stage = VK_SHADER_STAGE_VERTEX_BIT,
-        .module = lightingVertShaderModule,
-        .pName = "main",
-        .pSpecializationInfo = NULL,
-    };
-
-    VkShaderModule lightingFragShaderModule;
-    CreateVkShaderModule(pGraphicEngine, "../shaders/lighting.frag", &lightingFragShaderModule);
-    VkPipelineShaderStageCreateInfo fragShaderStageCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .stage = VK_SHADER_STAGE_FRAGMENT_BIT,
-        .module = lightingFragShaderModule,
-        .pName = "main",
-        .pSpecializationInfo = NULL,
-    };
-    uint32_t stageCount = 2;
-    VkPipelineShaderStageCreateInfo *pipelineShaderStageCreateInfos = (VkPipelineShaderStageCreateInfo[]){vertShaderStageCreateInfo, fragShaderStageCreateInfo};
-
-    VkPipelineVertexInputStateCreateInfo vkPipelineVertexInputStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .vertexBindingDescriptionCount = 0,
-        .pVertexBindingDescriptions = NULL,
-        .vertexAttributeDescriptionCount = 0,
-        .pVertexAttributeDescriptions = NULL,
-    };
-
-    VkPipelineInputAssemblyStateCreateInfo pipelineInputAssemblyStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
-        .primitiveRestartEnable = VK_FALSE,
-    };
-    VkViewport viewport = {
-        .x = 0.0f,
-        .y = 0.0f,
-        .width = pGraphicEngine->swapchainExtent.width,
-        .height = pGraphicEngine->swapchainExtent.height,
-        .minDepth = 0.0f,
-        .maxDepth = 1.0f,
-    };
-    VkOffset2D offset = {
-        .x = 0,
-        .y = 0,
-    };
-    VkRect2D scissor = {
-        .offset = offset,
-        .extent = pGraphicEngine->swapchainExtent,
-    };
-    VkPipelineViewportStateCreateInfo pipelineViewportStateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .viewportCount = 1,
-        .pViewports = &viewport,
-        .scissorCount = 1,
-        .pScissors = &scissor,
-    };
-    VkPipelineRasterizationStateCreateInfo pipelineRasterizationStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .rasterizerDiscardEnable = VK_FALSE,
-        .polygonMode = VK_POLYGON_MODE_FILL,
-        .cullMode = VK_CULL_MODE_NONE,
-        .frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE,
-        .depthBiasEnable = VK_FALSE,
-        .depthBiasConstantFactor = 0,
-        .depthBiasClamp = VK_FALSE,
-        .depthBiasSlopeFactor = 0,
-        .lineWidth = 1.0f,
-    };
-
-    VkPipelineDepthStencilStateCreateInfo pipelineDepthStencilStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .depthTestEnable = VK_FALSE,
-        .depthWriteEnable = VK_FALSE,
-        .depthCompareOp = VK_COMPARE_OP_ALWAYS,
-        .depthBoundsTestEnable = VK_FALSE,
-        .stencilTestEnable = VK_FALSE,
-        .front = {},
-        .back = {},
-        .minDepthBounds = 0,
-        .maxDepthBounds = 1,
-    };
-
-    VkPipelineColorBlendAttachmentState pipelineColorBlendAttachmentState = {
-        .blendEnable = false,
-        .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
-        .dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
-        .colorBlendOp = VK_BLEND_OP_ADD,
-        .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
-        .dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO,
-        .alphaBlendOp = VK_BLEND_OP_ADD,
-        .colorWriteMask = VK_COLOR_COMPONENT_A_BIT | VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT,
-    };
-
-    VkPipelineColorBlendStateCreateInfo colorBlendStateCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .logicOpEnable = VK_FALSE,
-        .logicOp = VK_LOGIC_OP_COPY,
-        .attachmentCount = 1,
-        .pAttachments = &pipelineColorBlendAttachmentState,
-        .blendConstants[0] = 0.0f,
-        .blendConstants[1] = 0.0f,
-        .blendConstants[2] = 0.0f,
-        .blendConstants[3] = 0.0f,
-    };
-
-    uint32_t dynamicStateCount = 2;
-    VkDynamicState dynamicStates[] = {
-        VK_DYNAMIC_STATE_VIEWPORT,
-        VK_DYNAMIC_STATE_SCISSOR,
-    };
-    VkPipelineDynamicStateCreateInfo dynamicState = {
-        .sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .dynamicStateCount = dynamicStateCount,
-        .pDynamicStates = dynamicStates,
-    };
-    pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1] = NULL;
-    VkGraphicsPipelineCreateInfo lightingPipelineCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .stageCount = stageCount,
-        .pStages = pipelineShaderStageCreateInfos,
-        .pVertexInputState = &vkPipelineVertexInputStateCreateInfo,
-        .pInputAssemblyState = &pipelineInputAssemblyStateCreateInfo,
-        .pTessellationState = NULL,
-        .pViewportState = &pipelineViewportStateInfo,
-        .pRasterizationState = &pipelineRasterizationStateCreateInfo,
-        .pMultisampleState = NULL,
-        .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
-        .pColorBlendState = &colorBlendStateCreateInfo,
-        .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1],
-        .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
-        .subpass = 0,
-        .basePipelineHandle = VK_NULL_HANDLE,
-        .basePipelineIndex = 0,
-    };
-
-    VkPipelineCache pipelineCache = NULL;
-    result = vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, 1, &lightingPipelineCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelines[1]);
-    TryThrowVulkanError(result);
-    DestroyVkShaderModule(pGraphicEngine, lightingVertShaderModule);
-    DestroyVkShaderModule(pGraphicEngine, lightingFragShaderModule);
-}
-static void DestroyLightingPipeline(GraphicEngine *pGraphicEngine)
-{
-    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[1], NULL);
-    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1], NULL);
-    vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[1], NULL);
-}
-
 static void CreateDescriptorPool(GraphicEngine *pGraphicEngine)
 {
+    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
+    uint32_t descriptorCount = 0;
+    for (uint32_t i = 0; i < pDeferredRenderPass->subpassCount; i++)
+    {
+        Subpass subpass = pDeferredRenderPass->subpasses[i];
+        descriptorCount += subpass.maxObjectCount;
+    }
+
     VkDescriptorPoolSize poolSize[] = {
         {
             .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = pGraphicEngine->deferredRenderPipeline.maxObjectCount * 2,
+            .descriptorCount = descriptorCount,
         }};
     VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
-        .maxSets = pGraphicEngine->deferredRenderPipeline.maxObjectCount,
+        .maxSets = descriptorCount,
         .poolSizeCount = 1,
         .pPoolSizes = poolSize,
     };
-    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
+    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPass.vkDescriptorPool);
     TryThrowVulkanError(result);
 }
 
 static void DestroyDescriptorPool(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPass.vkDescriptorPool, NULL);
 }
-
-static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
+static void CreateSubpasses(GraphicEngine *pGraphicEngine)
 {
-    pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
-    pGraphicEngine->deferredRenderPipeline.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-    pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-    pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
+    pDeferredRenderPass->subpassCount = 2;
+    pDeferredRenderPass->subpasses = TickernelMalloc(sizeof(Subpass) * pDeferredRenderPass->subpassCount);
+
+    // pGraphicEngine->deferredRenderPass.vkPipelineCount = 2;
+    // pGraphicEngine->deferredRenderPass.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPass.vkPipelineCount);
+    // pGraphicEngine->deferredRenderPass.vkPipelineToLayout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPass.vkPipelineCount);
+    // pGraphicEngine->deferredRenderPass.vkPipelineToDescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPass.vkPipelineCount);
 
-    pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
-    pGraphicEngine->deferredRenderPipeline.renderPipelineObjects = TickernelMalloc(sizeof(RenderPipelineObject) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
+    // pGraphicEngine->deferredRenderPass.maxObjectCount = 4096;
+    // pGraphicEngine->deferredRenderPass.renderPipelineObjects = TickernelMalloc(sizeof(RenderPipelineObject) * pGraphicEngine->deferredRenderPass.maxObjectCount);
     CreateDescriptorPool(pGraphicEngine);
     CreateGeometryPipeline(pGraphicEngine);
     CreateLightingPipeline(pGraphicEngine);
 }
 
-static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
+static void DestroySubpasses(GraphicEngine *pGraphicEngine)
 {
     DestroyGeometryPipeline(pGraphicEngine);
     DestroyLightingPipeline(pGraphicEngine);
     DestroyDescriptorPool(pGraphicEngine);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.renderPipelineObjects);
-
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout);
-}
-
-void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipelineObject deferredRenderPipelineObject, uint32_t *pIndex)
-{
-    VkResult result = VK_SUCCESS;
-    RenderPipeline pDeferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
-    if (pGraphicEngine->deferredRenderPipeline.objectCount < pGraphicEngine->deferredRenderPipeline.maxObjectCount)
-    {
-        RenderPipelineObject renderPipelineObject;
-        renderPipelineObject.vertexCount = deferredRenderPipelineObject.vertexCount;
-
-        // Create vertexBuffer
-        VkDeviceSize bufferSize = sizeof(DeferredRenderPipelineVertex) * deferredRenderPipelineObject.vertexCount;
-        VkBuffer stagingBuffer;
-        VkDeviceMemory stagingBufferMemory;
-        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_TRANSFER_SRC_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &stagingBuffer, &stagingBufferMemory);
-        void *pData;
-        result = vkMapMemory(pGraphicEngine->vkDevice, stagingBufferMemory, 0, bufferSize, 0, &pData);
-        TryThrowVulkanError(result);
-        memcpy(pData, deferredRenderPipelineObject.vertices, bufferSize);
-        vkUnmapMemory(pGraphicEngine->vkDevice, stagingBufferMemory);
-        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, &renderPipelineObject.vertexBuffer, &renderPipelineObject.vertexBufferMemory);
-        TryThrowVulkanError(result);
-        CopyVkBuffer(pGraphicEngine, stagingBuffer, renderPipelineObject.vertexBuffer, bufferSize);
-        DestroyBuffer(pGraphicEngine->vkDevice, stagingBuffer, stagingBufferMemory);
-
-        // Create objectUniformBuffer
-        bufferSize = sizeof(DeferredRenderPipelineObjectUniformBuffer);
-        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &renderPipelineObject.objectUniformBuffer, &renderPipelineObject.objectUniformBufferMemory);
-        vkMapMemory(pGraphicEngine->vkDevice, renderPipelineObject.objectUniformBufferMemory, 0, bufferSize, 0, &renderPipelineObject.objectUniformBufferMapped);
-
-        // Create vkDescriptorSet
-        VkDescriptorSetAllocateInfo descriptorSetAllocateInfo = {
-            .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
-            .pNext = NULL,
-            .descriptorPool = pGraphicEngine->deferredRenderPipeline.vkDescriptorPool,
-            .descriptorSetCount = 1,
-            .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0],
-        };
-        renderPipelineObject.vkPipelineToDescriptorSet = TickernelMalloc(sizeof(VkDescriptorSet) * 2);
-
-        result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &descriptorSetAllocateInfo, &renderPipelineObject.vkPipelineToDescriptorSet[0]);
-
-        VkDescriptorBufferInfo globalDescriptorBufferInfo = {
-            .buffer = pGraphicEngine->globalUniformBuffer,
-            .offset = 0,
-            .range = sizeof(GlobalUniformBuffer),
-        };
-        VkDescriptorBufferInfo objectDescriptorBufferInfo = {
-            .buffer = renderPipelineObject.objectUniformBuffer,
-            .offset = 0,
-            .range = sizeof(DeferredRenderPipelineObjectUniformBuffer),
-        };
-
-        VkWriteDescriptorSet descriptorWrites[2] = {
-            {
-                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
-                .pNext = NULL,
-                .dstSet = renderPipelineObject.vkPipelineToDescriptorSet[0],
-                .dstBinding = 0,
-                .dstArrayElement = 0,
-                .descriptorCount = 1,
-                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-                .pImageInfo = NULL,
-                .pBufferInfo = &globalDescriptorBufferInfo,
-                .pTexelBufferView = NULL,
-            },
-            {
-                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
-                .pNext = NULL,
-                .dstSet = renderPipelineObject.vkPipelineToDescriptorSet[0],
-                .dstBinding = 1,
-                .dstArrayElement = 0,
-                .descriptorCount = 1,
-                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-                .pImageInfo = NULL,
-                .pBufferInfo = &objectDescriptorBufferInfo,
-                .pTexelBufferView = NULL,
-            },
-        };
-        vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 2, descriptorWrites, 0, NULL);
-        // Add to renderPipelineObjects
-        pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[pGraphicEngine->deferredRenderPipeline.objectCount] = renderPipelineObject;
-        pGraphicEngine->deferredRenderPipeline.objectCount++;
-    }
-    else
-    {
-        /* code */
-    }
-}
-
-void RemoveObjectFromDeferredRenderPipeline(GraphicEngine *pGraphicEngine, uint32_t index)
-{
-    RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[index];
-    vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, 1, &pRenderPipelineObject->vkPipelineToDescriptorSet[0]);
-    TickernelFree(pRenderPipelineObject->vkPipelineToDescriptorSet);
-    DestroyBuffer(pGraphicEngine->vkDevice, pRenderPipelineObject->objectUniformBuffer, pRenderPipelineObject->objectUniformBufferMemory);
-
-    DestroyBuffer(pGraphicEngine->vkDevice, pRenderPipelineObject->vertexBuffer, pRenderPipelineObject->vertexBufferMemory);
+    // TickernelFree(pGraphicEngine->deferredRenderPass.renderPipelineObjects);
+    // TickernelFree(pGraphicEngine->deferredRenderPass.vkPipelineToLayout);
+    // TickernelFree(pGraphicEngine->deferredRenderPass.vkPipelineToDescriptorSetLayout);
+    TickernelFree(pGraphicEngine->deferredRenderPass.subpasses);
 }
 
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
-    CreateVkPipelines(pGraphicEngine);
+    CreateSubpasses(pGraphicEngine);
 }
 
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    DestroyVkPipelines(pGraphicEngine);
-    DestroyVkRenderPass(pGraphicEngine);
+    DestroySubpasses(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
+    DestroyVkRenderPass(pGraphicEngine);
 }
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    // UpdateObjectUniformBuffer(pGraphicEngine);
-    if (pGraphicEngine->hasRecreatedSwapchain)
-    {
-        for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
-        {
-            if (pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
-            {
-                // continue;
-            }
-            else
-            {
-                vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
-                pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
-            }
-        }
-    }
-
-    VkResult result = VK_SUCCESS;
-    RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
-
+    PrepareCurrentFrambuffer(pGraphicEngine);
     VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
     VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
         {
@@ -765,7 +277,7 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
             .flags = 0,
             .pInheritanceInfo = NULL,
         };
-    result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
+    VkResult result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
     TryThrowVulkanError(result);
     VkOffset2D offset =
         {
@@ -786,58 +298,35 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
             .depthStencil = {1.0f, 0},
         },
     };
-
-    PrepareCurrentFrambuffer(pGraphicEngine);
+    RenderPass *pDeferredRenderPass = &pGraphicEngine->deferredRenderPass;
     VkRenderPassBeginInfo renderPassBeginInfo =
         {
             .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
             .pNext = NULL,
-            .renderPass = deferredRenderPipeline.vkRenderPass,
-            .framebuffer = pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
+            .renderPass = pDeferredRenderPass->vkRenderPass,
+            .framebuffer = pDeferredRenderPass->vkFramebuffers[pGraphicEngine->frameIndex],
             .renderArea = renderArea,
             .clearValueCount = clearValueCount,
             .pClearValues = clearValues,
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
-    VkViewport viewport =
-        {
-            .x = 0.0f,
-            .y = 0.0f,
-            .width = pGraphicEngine->swapchainExtent.width,
-            .height = pGraphicEngine->swapchainExtent.height,
-            .minDepth = 0.0f,
-            .maxDepth = 1.0f,
-        };
-    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-
-    VkOffset2D scissorOffset =
-        {
-            .x = 0,
-            .y = 0,
-        };
-    VkRect2D scissor =
-        {
-            .offset = scissorOffset,
-            .extent = pGraphicEngine->swapchainExtent,
-        };
-    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-
-    uint32_t geometryPipelineIndex = 0;
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
+    for (uint32_t i = 0; i < pDeferredRenderPass->subpassCount; i++)
     {
-        RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[i];
-        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[geometryPipelineIndex], 0, 1, &pRenderPipelineObject->vkPipelineToDescriptorSet[0], 0, NULL);
-        VkBuffer vertexBuffers[] = {pRenderPipelineObject->vertexBuffer};
-        VkDeviceSize offsets[] = {0};
-        vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-        uint32_t vertexCount = pRenderPipelineObject->vertexCount;
-        vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+        Subpass *pSubpass = &pDeferredRenderPass->subpasses[i];
+        vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipeline);
+        uint32_t geometryPipelineIndex = 0;
+        for (uint32_t i = 0; i < pSubpass->objectCount; i++)
+        {
+            RenderPipelineObject *pRenderPipelineObject = &pSubpass->renderPipelineObjects[i];
+            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pSubpass->vkPipelineLayout, 0, 1, &pRenderPipelineObject->vkDescriptorSet, 0, NULL);
+            VkBuffer vertexBuffers[] = {pRenderPipelineObject->vertexBuffer};
+            VkDeviceSize offsets[] = {0};
+            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+            uint32_t vertexCount = pRenderPipelineObject->vertexCount;
+            vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+        }
     }
 
-    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1], 0, 1, , 0, NULL);
-    // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
-
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);

commit 4340751c32b92dd11b6eecc93a7fc78f096b5ada
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 13 16:07:45 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 44d2a08..8faaf0c 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -657,18 +657,18 @@ void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRen
             .pNext = NULL,
             .descriptorPool = pGraphicEngine->deferredRenderPipeline.vkDescriptorPool,
             .descriptorSetCount = 1,
-            .pSetLayouts = pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0],
+            .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0],
         };
+        renderPipelineObject.vkPipelineToDescriptorSet = TickernelMalloc(sizeof(VkDescriptorSet) * 2);
 
-        result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &descriptorSetAllocateInfo, pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0]);
-        TRYRETURNVKERROR(result);
+        result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &descriptorSetAllocateInfo, &renderPipelineObject.vkPipelineToDescriptorSet[0]);
 
-        VkDescriptorBufferInfo descriptorBufferInfo = {
+        VkDescriptorBufferInfo globalDescriptorBufferInfo = {
             .buffer = pGraphicEngine->globalUniformBuffer,
             .offset = 0,
             .range = sizeof(GlobalUniformBuffer),
         };
-         VkDescriptorBufferInfo descriptorBufferInfo = {
+        VkDescriptorBufferInfo objectDescriptorBufferInfo = {
             .buffer = renderPipelineObject.objectUniformBuffer,
             .offset = 0,
             .range = sizeof(DeferredRenderPipelineObjectUniformBuffer),
@@ -678,25 +678,25 @@ void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRen
             {
                 .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
                 .pNext = NULL,
-                .dstSet = descriptorSets[i],
+                .dstSet = renderPipelineObject.vkPipelineToDescriptorSet[0],
                 .dstBinding = 0,
                 .dstArrayElement = 0,
                 .descriptorCount = 1,
                 .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
                 .pImageInfo = NULL,
-                .pBufferInfo = &descriptorBufferInfo,
+                .pBufferInfo = &globalDescriptorBufferInfo,
                 .pTexelBufferView = NULL,
             },
             {
                 .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
                 .pNext = NULL,
-                .dstSet = descriptorSets[i],
+                .dstSet = renderPipelineObject.vkPipelineToDescriptorSet[0],
                 .dstBinding = 1,
                 .dstArrayElement = 0,
                 .descriptorCount = 1,
-                .descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
-                .pImageInfo = &imageInfo,
-                .pBufferInfo = &descriptorBufferInfo,
+                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+                .pImageInfo = NULL,
+                .pBufferInfo = &objectDescriptorBufferInfo,
                 .pTexelBufferView = NULL,
             },
         };
@@ -714,6 +714,8 @@ void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRen
 void RemoveObjectFromDeferredRenderPipeline(GraphicEngine *pGraphicEngine, uint32_t index)
 {
     RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[index];
+    vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, 1, &pRenderPipelineObject->vkPipelineToDescriptorSet[0]);
+    TickernelFree(pRenderPipelineObject->vkPipelineToDescriptorSet);
     DestroyBuffer(pGraphicEngine->vkDevice, pRenderPipelineObject->objectUniformBuffer, pRenderPipelineObject->objectUniformBufferMemory);
 
     DestroyBuffer(pGraphicEngine->vkDevice, pRenderPipelineObject->vertexBuffer, pRenderPipelineObject->vertexBufferMemory);
@@ -833,7 +835,7 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
         vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
     }
 
-    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);
+    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1], 0, 1, , 0, NULL);
     // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
 
     vkCmdEndRenderPass(vkCommandBuffer);

commit 6d5920252928e65f7d077d3162989d808131ae12
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 13 00:27:33 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 08f8d21..44d2a08 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -351,18 +351,18 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .bindingCount = 2,
         .pBindings = bindings,
     };
-    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0]);
+    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0]);
     VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
         .setLayoutCount = 1,
-        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0],
+        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0],
         .pushConstantRangeCount = 0,
         .pPushConstantRanges = NULL,
     };
 
-    result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0]);
+    result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[0]);
     TryThrowVulkanError(result);
     VkGraphicsPipelineCreateInfo geometryPipelineCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
@@ -379,7 +379,7 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
         .pColorBlendState = &colorBlendStateCreateInfo,
         .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0],
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[0],
         .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
         .subpass = 0,
         .basePipelineHandle = VK_NULL_HANDLE,
@@ -394,8 +394,8 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
 }
 static void DestroyGeometryPipeline(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0], NULL);
-    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0], NULL);
+    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0], NULL);
+    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[0], NULL);
     vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[0], NULL);
 }
 static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
@@ -536,7 +536,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .dynamicStateCount = dynamicStateCount,
         .pDynamicStates = dynamicStates,
     };
-    pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1] = NULL;
+    pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1] = NULL;
     VkGraphicsPipelineCreateInfo lightingPipelineCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
         .pNext = NULL,
@@ -552,7 +552,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
         .pColorBlendState = &colorBlendStateCreateInfo,
         .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1],
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1],
         .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
         .subpass = 0,
         .basePipelineHandle = VK_NULL_HANDLE,
@@ -567,8 +567,8 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
 }
 static void DestroyLightingPipeline(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[1], NULL);
-    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], NULL);
+    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[1], NULL);
+    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[1], NULL);
     vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[1], NULL);
 }
 
@@ -600,8 +600,8 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 {
     pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
     pGraphicEngine->deferredRenderPipeline.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-    pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-    pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
 
     pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
     pGraphicEngine->deferredRenderPipeline.renderPipelineObjects = TickernelMalloc(sizeof(RenderPipelineObject) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
@@ -617,9 +617,9 @@ static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
     DestroyDescriptorPool(pGraphicEngine);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.renderPipelineObjects);
 
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout);
 }
 
 void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipelineObject deferredRenderPipelineObject, uint32_t *pIndex)
@@ -652,7 +652,56 @@ void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRen
         vkMapMemory(pGraphicEngine->vkDevice, renderPipelineObject.objectUniformBufferMemory, 0, bufferSize, 0, &renderPipelineObject.objectUniformBufferMapped);
 
         // Create vkDescriptorSet
-        
+        VkDescriptorSetAllocateInfo descriptorSetAllocateInfo = {
+            .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
+            .pNext = NULL,
+            .descriptorPool = pGraphicEngine->deferredRenderPipeline.vkDescriptorPool,
+            .descriptorSetCount = 1,
+            .pSetLayouts = pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0],
+        };
+
+        result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &descriptorSetAllocateInfo, pGraphicEngine->deferredRenderPipeline.vkPipelineToDescriptorSetLayout[0]);
+        TRYRETURNVKERROR(result);
+
+        VkDescriptorBufferInfo descriptorBufferInfo = {
+            .buffer = pGraphicEngine->globalUniformBuffer,
+            .offset = 0,
+            .range = sizeof(GlobalUniformBuffer),
+        };
+         VkDescriptorBufferInfo descriptorBufferInfo = {
+            .buffer = renderPipelineObject.objectUniformBuffer,
+            .offset = 0,
+            .range = sizeof(DeferredRenderPipelineObjectUniformBuffer),
+        };
+
+        VkWriteDescriptorSet descriptorWrites[2] = {
+            {
+                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
+                .pNext = NULL,
+                .dstSet = descriptorSets[i],
+                .dstBinding = 0,
+                .dstArrayElement = 0,
+                .descriptorCount = 1,
+                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+                .pImageInfo = NULL,
+                .pBufferInfo = &descriptorBufferInfo,
+                .pTexelBufferView = NULL,
+            },
+            {
+                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
+                .pNext = NULL,
+                .dstSet = descriptorSets[i],
+                .dstBinding = 1,
+                .dstArrayElement = 0,
+                .descriptorCount = 1,
+                .descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER,
+                .pImageInfo = &imageInfo,
+                .pBufferInfo = &descriptorBufferInfo,
+                .pTexelBufferView = NULL,
+            },
+        };
+        vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 2, descriptorWrites, 0, NULL);
+        // Add to renderPipelineObjects
         pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[pGraphicEngine->deferredRenderPipeline.objectCount] = renderPipelineObject;
         pGraphicEngine->deferredRenderPipeline.objectCount++;
     }
@@ -776,7 +825,7 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
     {
         RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[i];
-        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pRenderPipelineObject->vkPipeline2DescriptorSet[0], 0, NULL);
+        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelineToLayout[geometryPipelineIndex], 0, 1, &pRenderPipelineObject->vkPipelineToDescriptorSet[0], 0, NULL);
         VkBuffer vertexBuffers[] = {pRenderPipelineObject->vertexBuffer};
         VkDeviceSize offsets[] = {0};
         vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);

commit 6c1365c82f129e61050a068f98a1446cc734a939
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 12 01:16:47 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 6d68dff..08f8d21 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,29 +1,5 @@
 #include <deferredRenderPipeline.h>
 
-// static void CreateObjectUniformBuffers(GraphicEngine *pGraphicEngine)
-// {
-//     pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-//     pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-//     pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-// }
-
-// static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
-// {
-//     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped);
-//     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories);
-//     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffers);
-// }
-
-// static void UpdateObjectUniformBuffer(GraphicEngine *pGraphicEngine)
-// {
-//     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
-//     {
-//         ObjectUniformBufferObject ubo;
-//         glm_rotate(ubo.model, pGraphicEngine->frameCount * glm_rad(0.01f), (vec3){0.0f, 0.0f, 1.0f});
-//         memcpy(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i], &ubo, sizeof(ubo));
-//     }
-// }
-
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
     uint32_t attachmentCount = 3;
@@ -596,6 +572,30 @@ static void DestroyLightingPipeline(GraphicEngine *pGraphicEngine)
     vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[1], NULL);
 }
 
+static void CreateDescriptorPool(GraphicEngine *pGraphicEngine)
+{
+    VkDescriptorPoolSize poolSize[] = {
+        {
+            .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+            .descriptorCount = pGraphicEngine->deferredRenderPipeline.maxObjectCount * 2,
+        }};
+    VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .maxSets = pGraphicEngine->deferredRenderPipeline.maxObjectCount,
+        .poolSizeCount = 1,
+        .pPoolSizes = poolSize,
+    };
+    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
+    TryThrowVulkanError(result);
+}
+
+static void DestroyDescriptorPool(GraphicEngine *pGraphicEngine)
+{
+    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+}
+
 static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 {
     pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
@@ -605,7 +605,7 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 
     pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
     pGraphicEngine->deferredRenderPipeline.renderPipelineObjects = TickernelMalloc(sizeof(RenderPipelineObject) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-
+    CreateDescriptorPool(pGraphicEngine);
     CreateGeometryPipeline(pGraphicEngine);
     CreateLightingPipeline(pGraphicEngine);
 }
@@ -614,62 +614,45 @@ static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 {
     DestroyGeometryPipeline(pGraphicEngine);
     DestroyLightingPipeline(pGraphicEngine);
-
+    DestroyDescriptorPool(pGraphicEngine);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.renderPipelineObjects);
 
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout);
 }
-// static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
-// {
-//     VkDescriptorPoolSize poolSize[] = {
-//         {
-//             .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-//             .descriptorCount = pGraphicEngine->deferredRenderPipeline.maxObjectCount * 2,
-//         }};
-//     VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
-//         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
-//         .pNext = NULL,
-//         .flags = 0,
-//         .maxSets = pGraphicEngine->deferredRenderPipeline.maxObjectCount,
-//         .poolSizeCount = 1,
-//         .pPoolSizes = poolSize,
-//     };
-//     VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
-//     TryThrowVulkanError(result);
-// }
-// static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
-// {
-//     vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
-// }
 
 void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipelineObject deferredRenderPipelineObject, uint32_t *pIndex)
 {
     VkResult result = VK_SUCCESS;
+    RenderPipeline pDeferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
     if (pGraphicEngine->deferredRenderPipeline.objectCount < pGraphicEngine->deferredRenderPipeline.maxObjectCount)
     {
         RenderPipelineObject renderPipelineObject;
         renderPipelineObject.vertexCount = deferredRenderPipelineObject.vertexCount;
+
         // Create vertexBuffer
         VkDeviceSize bufferSize = sizeof(DeferredRenderPipelineVertex) * deferredRenderPipelineObject.vertexCount;
         VkBuffer stagingBuffer;
         VkDeviceMemory stagingBufferMemory;
         CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_TRANSFER_SRC_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &stagingBuffer, &stagingBufferMemory);
-
         void *pData;
         result = vkMapMemory(pGraphicEngine->vkDevice, stagingBufferMemory, 0, bufferSize, 0, &pData);
         TryThrowVulkanError(result);
         memcpy(pData, deferredRenderPipelineObject.vertices, bufferSize);
-
         vkUnmapMemory(pGraphicEngine->vkDevice, stagingBufferMemory);
         CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, &renderPipelineObject.vertexBuffer, &renderPipelineObject.vertexBufferMemory);
         TryThrowVulkanError(result);
-
         CopyVkBuffer(pGraphicEngine, stagingBuffer, renderPipelineObject.vertexBuffer, bufferSize);
-
         DestroyBuffer(pGraphicEngine->vkDevice, stagingBuffer, stagingBufferMemory);
 
+        // Create objectUniformBuffer
+        bufferSize = sizeof(DeferredRenderPipelineObjectUniformBuffer);
+        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &renderPipelineObject.objectUniformBuffer, &renderPipelineObject.objectUniformBufferMemory);
+        vkMapMemory(pGraphicEngine->vkDevice, renderPipelineObject.objectUniformBufferMemory, 0, bufferSize, 0, &renderPipelineObject.objectUniformBufferMapped);
+
+        // Create vkDescriptorSet
+        
         pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[pGraphicEngine->deferredRenderPipeline.objectCount] = renderPipelineObject;
         pGraphicEngine->deferredRenderPipeline.objectCount++;
     }
@@ -682,9 +665,9 @@ void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRen
 void RemoveObjectFromDeferredRenderPipeline(GraphicEngine *pGraphicEngine, uint32_t index)
 {
     RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[index];
-    DestroyBuffer(pGraphicEngine
-                      ->vkDevice,
-                  pRenderPipelineObject->vertexBuffer, pRenderPipelineObject->vertexBufferMemory);
+    DestroyBuffer(pGraphicEngine->vkDevice, pRenderPipelineObject->objectUniformBuffer, pRenderPipelineObject->objectUniformBufferMemory);
+
+    DestroyBuffer(pGraphicEngine->vkDevice, pRenderPipelineObject->vertexBuffer, pRenderPipelineObject->vertexBufferMemory);
 }
 
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -692,15 +675,11 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
     CreateVkPipelines(pGraphicEngine);
-    // CreateObjectUniformBuffers(pGraphicEngine);
-    // CreateVkDescriptorSets(pGraphicEngine);
 }
+
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    // DestroyVkDescriptorSets(pGraphicEngine);
-    // DestroyObjectUniformBuffers(pGraphicEngine);
     DestroyVkPipelines(pGraphicEngine);
-    // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
     DestroyVkRenderPass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
 }

commit 5990dd66384461e673d8208b90b162164c50bddb
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 11 19:54:56 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 057db18..6d68dff 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,28 +1,28 @@
 #include <deferredRenderPipeline.h>
 
-static void CreateObjectUniformBuffers(GraphicEngine *pGraphicEngine)
-{
-    pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-    pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-    pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-}
-
-static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
-{
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffers);
-}
-
-static void UpdateObjectUniformBuffer(GraphicEngine *pGraphicEngine)
-{
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
-    {
-        ObjectUniformBufferObject ubo;
-        glm_rotate(ubo.model, pGraphicEngine->frameCount * glm_rad(0.01f), (vec3){0.0f, 0.0f, 1.0f});
-        memcpy(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i], &ubo, sizeof(ubo));
-    }
-}
+// static void CreateObjectUniformBuffers(GraphicEngine *pGraphicEngine)
+// {
+//     pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
+//     pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
+//     pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
+// }
+
+// static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
+// {
+//     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped);
+//     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories);
+//     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffers);
+// }
+
+// static void UpdateObjectUniformBuffer(GraphicEngine *pGraphicEngine)
+// {
+//     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
+//     {
+//         ObjectUniformBufferObject ubo;
+//         glm_rotate(ubo.model, pGraphicEngine->frameCount * glm_rad(0.01f), (vec3){0.0f, 0.0f, 1.0f});
+//         memcpy(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i], &ubo, sizeof(ubo));
+//     }
+// }
 
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
@@ -603,11 +603,8 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
     pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
     pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
 
-    pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets = TickernelMalloc(sizeof(VkDescriptorSet *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
-    {
-        pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[i] = TickernelMalloc(sizeof(VkDescriptorSet) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
-    }
+    pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
+    pGraphicEngine->deferredRenderPipeline.renderPipelineObjects = TickernelMalloc(sizeof(RenderPipelineObject) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
 
     CreateGeometryPipeline(pGraphicEngine);
     CreateLightingPipeline(pGraphicEngine);
@@ -617,107 +614,91 @@ static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 {
     DestroyGeometryPipeline(pGraphicEngine);
     DestroyLightingPipeline(pGraphicEngine);
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
-    {
-        TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[i]);
-    }
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets);
+
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.renderPipelineObjects);
+
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout);
 }
-static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
-{
-    VkDescriptorPoolSize poolSize[] = {
-        {
-            .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = pGraphicEngine->deferredRenderPipeline.maxObjectCount * 2,
-        }};
-    VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .maxSets = pGraphicEngine->deferredRenderPipeline.maxObjectCount,
-        .poolSizeCount = 1,
-        .pPoolSizes = poolSize,
-    };
-    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
-    TryThrowVulkanError(result);
-}
-static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
-{
-    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
-}
-
-void AddObject(GraphicEngine *pGraphicEngine)
+// static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
+// {
+//     VkDescriptorPoolSize poolSize[] = {
+//         {
+//             .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+//             .descriptorCount = pGraphicEngine->deferredRenderPipeline.maxObjectCount * 2,
+//         }};
+//     VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
+//         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
+//         .pNext = NULL,
+//         .flags = 0,
+//         .maxSets = pGraphicEngine->deferredRenderPipeline.maxObjectCount,
+//         .poolSizeCount = 1,
+//         .pPoolSizes = poolSize,
+//     };
+//     VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
+//     TryThrowVulkanError(result);
+// }
+// static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
+// {
+//     vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+// }
+
+void AddObject2DeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipelineObject deferredRenderPipelineObject, uint32_t *pIndex)
 {
     VkResult result = VK_SUCCESS;
-    VkDescriptorSetAllocateInfo vkDescriptorSetAllocateInfo = {
-        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
-        .pNext = NULL,
-        .descriptorPool = pGraphicEngine->deferredRenderPipeline.vkDescriptorPool,
-        .descriptorSetCount = 2,
-        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0],
-    };
-    result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &vkDescriptorSetAllocateInfo, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
-    TryThrowVulkanError(result);
+    if (pGraphicEngine->deferredRenderPipeline.objectCount < pGraphicEngine->deferredRenderPipeline.maxObjectCount)
+    {
+        RenderPipelineObject renderPipelineObject;
+        renderPipelineObject.vertexCount = deferredRenderPipelineObject.vertexCount;
+        // Create vertexBuffer
+        VkDeviceSize bufferSize = sizeof(DeferredRenderPipelineVertex) * deferredRenderPipelineObject.vertexCount;
+        VkBuffer stagingBuffer;
+        VkDeviceMemory stagingBufferMemory;
+        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_TRANSFER_SRC_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &stagingBuffer, &stagingBufferMemory);
+
+        void *pData;
+        result = vkMapMemory(pGraphicEngine->vkDevice, stagingBufferMemory, 0, bufferSize, 0, &pData);
+        TryThrowVulkanError(result);
+        memcpy(pData, deferredRenderPipelineObject.vertices, bufferSize);
 
-    VkDescriptorBufferInfo globalUniformDescriptorBufferInfo = {
-        .buffer = pGraphicEngine->globalUniformBuffer,
-        .offset = 0,
-        .range = sizeof(GlobalUniformBufferObject),
-    };
-    VkDescriptorBufferInfo objectUniformDescriptorBufferInfo = {
-        .buffer = pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i],
-        .offset = 0,
-        .range = sizeof(ObjectUniformBufferObject),
-    };
+        vkUnmapMemory(pGraphicEngine->vkDevice, stagingBufferMemory);
+        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_TRANSFER_DST_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT, VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT, &renderPipelineObject.vertexBuffer, &renderPipelineObject.vertexBufferMemory);
+        TryThrowVulkanError(result);
 
-    VkWriteDescriptorSet descriptorWrites[] = {
-        {
-            .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
-            .pNext = NULL,
-            .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
-            .dstBinding = 0,
-            .dstArrayElement = 0,
-            .descriptorCount = 1,
-            .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .pImageInfo = NULL,
-            .pBufferInfo = &globalUniformDescriptorBufferInfo,
-            .pTexelBufferView = NULL,
-        },
-        {
-            .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
-            .pNext = NULL,
-            .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
-            .dstBinding = 1,
-            .dstArrayElement = 0,
-            .descriptorCount = 1,
-            .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .pImageInfo = NULL,
-            .pBufferInfo = &objectUniformDescriptorBufferInfo,
-            .pTexelBufferView = NULL,
-        },
-    };
-    vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 1, descriptorWrites, 0, NULL);
+        CopyVkBuffer(pGraphicEngine, stagingBuffer, renderPipelineObject.vertexBuffer, bufferSize);
+
+        DestroyBuffer(pGraphicEngine->vkDevice, stagingBuffer, stagingBufferMemory);
+
+        pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[pGraphicEngine->deferredRenderPipeline.objectCount] = renderPipelineObject;
+        pGraphicEngine->deferredRenderPipeline.objectCount++;
+    }
+    else
+    {
+        /* code */
+    }
 }
-void RemoveObject(GraphicEngine *pGraphicEngine)
+
+void RemoveObjectFromDeferredRenderPipeline(GraphicEngine *pGraphicEngine, uint32_t index)
 {
+    RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[index];
+    DestroyBuffer(pGraphicEngine
+                      ->vkDevice,
+                  pRenderPipelineObject->vertexBuffer, pRenderPipelineObject->vertexBufferMemory);
 }
 
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
     CreateVkPipelines(pGraphicEngine);
-    CreateObjectUniformBuffers(pGraphicEngine);
-    CreateVkDescriptorSets(pGraphicEngine);
+    // CreateObjectUniformBuffers(pGraphicEngine);
+    // CreateVkDescriptorSets(pGraphicEngine);
 }
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    DestroyVkDescriptorSets(pGraphicEngine);
-    DestroyObjectUniformBuffers(pGraphicEngine);
+    // DestroyVkDescriptorSets(pGraphicEngine);
+    // DestroyObjectUniformBuffers(pGraphicEngine);
     DestroyVkPipelines(pGraphicEngine);
     // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
     DestroyVkRenderPass(pGraphicEngine);
@@ -726,7 +707,7 @@ void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    UpdateObjectUniformBuffer(pGraphicEngine);
+    // UpdateObjectUniformBuffer(pGraphicEngine);
     if (pGraphicEngine->hasRecreatedSwapchain)
     {
         for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
@@ -815,11 +796,12 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     uint32_t geometryPipelineIndex = 0;
     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
     {
-        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[geometryPipelineIndex][pGraphicEngine->frameIndex], 0, NULL);
-        VkBuffer vertexBuffers[] = {pGraphicEngine->deferredRenderPipeline.vertexBuffers[i]};
+        RenderPipelineObject *pRenderPipelineObject = &pGraphicEngine->deferredRenderPipeline.renderPipelineObjects[i];
+        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pRenderPipelineObject->vkPipeline2DescriptorSet[0], 0, NULL);
+        VkBuffer vertexBuffers[] = {pRenderPipelineObject->vertexBuffer};
         VkDeviceSize offsets[] = {0};
         vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-        uint32_t vertexCount = pGraphicEngine->deferredRenderPipeline.vertexCounts[i];
+        uint32_t vertexCount = pRenderPipelineObject->vertexCount;
         vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
     }
 

commit b3b9e7c305bc5e245d9f2cc93ae5bc8c2116f9b7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 11 00:54:52 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index c57653a..057db18 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -631,7 +631,7 @@ static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
     VkDescriptorPoolSize poolSize[] = {
         {
             .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = 2,
+            .descriptorCount = pGraphicEngine->deferredRenderPipeline.maxObjectCount * 2,
         }};
     VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
@@ -700,134 +700,133 @@ void AddObject(GraphicEngine *pGraphicEngine)
         },
     };
     vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 1, descriptorWrites, 0, NULL);
+}
+void RemoveObject(GraphicEngine *pGraphicEngine)
+{
+}
 
-    void RemoveObject(GraphicEngine * pGraphicEngine)
-    {
-        
-    }
-
-    void CreateDeferredRenderPipeline(GraphicEngine * pGraphicEngine)
-    {
-        pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
-        CreateVkRenderPass(pGraphicEngine);
-        CreateVkFramebuffers(pGraphicEngine);
-        CreateVkPipelines(pGraphicEngine);
-        CreateObjectUniformBuffers(pGraphicEngine);
-        CreateVkDescriptorSets(pGraphicEngine);
-    }
-    void DestroyDeferredRenderPipeline(GraphicEngine * pGraphicEngine)
-    {
-        DestroyVkDescriptorSets(pGraphicEngine);
-        DestroyObjectUniformBuffers(pGraphicEngine);
-        DestroyVkPipelines(pGraphicEngine);
-        // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
-        DestroyVkRenderPass(pGraphicEngine);
-        DestroyVkFramebuffers(pGraphicEngine);
-    }
+void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
+    CreateVkRenderPass(pGraphicEngine);
+    CreateVkFramebuffers(pGraphicEngine);
+    CreateVkPipelines(pGraphicEngine);
+    CreateObjectUniformBuffers(pGraphicEngine);
+    CreateVkDescriptorSets(pGraphicEngine);
+}
+void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    DestroyVkDescriptorSets(pGraphicEngine);
+    DestroyObjectUniformBuffers(pGraphicEngine);
+    DestroyVkPipelines(pGraphicEngine);
+    // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+    DestroyVkRenderPass(pGraphicEngine);
+    DestroyVkFramebuffers(pGraphicEngine);
+}
 
-    void RecordDeferredRenderPipeline(GraphicEngine * pGraphicEngine)
+void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    UpdateObjectUniformBuffer(pGraphicEngine);
+    if (pGraphicEngine->hasRecreatedSwapchain)
     {
-        UpdateObjectUniformBuffer(pGraphicEngine);
-        if (pGraphicEngine->hasRecreatedSwapchain)
+        for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
         {
-            for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+            if (pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
             {
-                if (pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
-                {
-                    // continue;
-                }
-                else
-                {
-                    vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
-                    pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
-                }
+                // continue;
+            }
+            else
+            {
+                vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
+                pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
             }
         }
+    }
 
-        VkResult result = VK_SUCCESS;
-        RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
+    VkResult result = VK_SUCCESS;
+    RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
 
-        VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
-        VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
-            {
-                .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
-                .pNext = NULL,
-                .flags = 0,
-                .pInheritanceInfo = NULL,
-            };
-        result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
-        TryThrowVulkanError(result);
-        VkOffset2D offset =
-            {
-                .x = 0,
-                .y = 0,
-            };
-        VkRect2D renderArea =
-            {
-                .offset = offset,
-                .extent = pGraphicEngine->swapchainExtent,
-            };
-        uint32_t clearValueCount = 2;
-        VkClearValue *clearValues = (VkClearValue[]){
-            {
-                .color = {0.0f, 0.0f, 0.0f, 1.0f},
-            },
-            {
-                .depthStencil = {1.0f, 0},
-            },
+    VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
+    VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
+        {
+            .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
+            .pNext = NULL,
+            .flags = 0,
+            .pInheritanceInfo = NULL,
         };
+    result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
+    TryThrowVulkanError(result);
+    VkOffset2D offset =
+        {
+            .x = 0,
+            .y = 0,
+        };
+    VkRect2D renderArea =
+        {
+            .offset = offset,
+            .extent = pGraphicEngine->swapchainExtent,
+        };
+    uint32_t clearValueCount = 2;
+    VkClearValue *clearValues = (VkClearValue[]){
+        {
+            .color = {0.0f, 0.0f, 0.0f, 1.0f},
+        },
+        {
+            .depthStencil = {1.0f, 0},
+        },
+    };
 
-        PrepareCurrentFrambuffer(pGraphicEngine);
-        VkRenderPassBeginInfo renderPassBeginInfo =
-            {
-                .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
-                .pNext = NULL,
-                .renderPass = deferredRenderPipeline.vkRenderPass,
-                .framebuffer = pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
-                .renderArea = renderArea,
-                .clearValueCount = clearValueCount,
-                .pClearValues = clearValues,
-            };
-        vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-        vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
-        VkViewport viewport =
-            {
-                .x = 0.0f,
-                .y = 0.0f,
-                .width = pGraphicEngine->swapchainExtent.width,
-                .height = pGraphicEngine->swapchainExtent.height,
-                .minDepth = 0.0f,
-                .maxDepth = 1.0f,
-            };
-        vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
-
-        VkOffset2D scissorOffset =
-            {
-                .x = 0,
-                .y = 0,
-            };
-        VkRect2D scissor =
-            {
-                .offset = scissorOffset,
-                .extent = pGraphicEngine->swapchainExtent,
-            };
-        vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+    PrepareCurrentFrambuffer(pGraphicEngine);
+    VkRenderPassBeginInfo renderPassBeginInfo =
+        {
+            .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
+            .pNext = NULL,
+            .renderPass = deferredRenderPipeline.vkRenderPass,
+            .framebuffer = pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
+            .renderArea = renderArea,
+            .clearValueCount = clearValueCount,
+            .pClearValues = clearValues,
+        };
+    vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
+    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
+    VkViewport viewport =
+        {
+            .x = 0.0f,
+            .y = 0.0f,
+            .width = pGraphicEngine->swapchainExtent.width,
+            .height = pGraphicEngine->swapchainExtent.height,
+            .minDepth = 0.0f,
+            .maxDepth = 1.0f,
+        };
+    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
 
-        uint32_t geometryPipelineIndex = 0;
-        for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
+    VkOffset2D scissorOffset =
         {
-            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[geometryPipelineIndex][pGraphicEngine->frameIndex], 0, NULL);
-            VkBuffer vertexBuffers[] = {pGraphicEngine->deferredRenderPipeline.vertexBuffers[i]};
-            VkDeviceSize offsets[] = {0};
-            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-            uint32_t vertexCount = pGraphicEngine->deferredRenderPipeline.vertexCounts[i];
-            vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
-        }
+            .x = 0,
+            .y = 0,
+        };
+    VkRect2D scissor =
+        {
+            .offset = scissorOffset,
+            .extent = pGraphicEngine->swapchainExtent,
+        };
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
 
-        // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);
-        // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+    uint32_t geometryPipelineIndex = 0;
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
+    {
+        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[geometryPipelineIndex][pGraphicEngine->frameIndex], 0, NULL);
+        VkBuffer vertexBuffers[] = {pGraphicEngine->deferredRenderPipeline.vertexBuffers[i]};
+        VkDeviceSize offsets[] = {0};
+        vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+        uint32_t vertexCount = pGraphicEngine->deferredRenderPipeline.vertexCounts[i];
+        vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+    }
 
-        vkCmdEndRenderPass(vkCommandBuffer);
-        result = vkEndCommandBuffer(vkCommandBuffer);
-        TryThrowVulkanError(result);
-    }
\ No newline at end of file
+    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);
+    // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+
+    vkCmdEndRenderPass(vkCommandBuffer);
+    result = vkEndCommandBuffer(vkCommandBuffer);
+    TryThrowVulkanError(result);
+}
\ No newline at end of file

commit c77ce9ca7104733aa2c86e8810b81f86974a10bd
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Sep 11 00:34:04 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 96b8999..c57653a 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -2,26 +2,13 @@
 
 static void CreateObjectUniformBuffers(GraphicEngine *pGraphicEngine)
 {
-    pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->swapchainImageCount);
-    pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->swapchainImageCount);
-    pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->swapchainImageCount);
-    size_t bufferSize = sizeof(ObjectUniformBufferObject);
-    VkResult result = VK_SUCCESS;
-    for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
-    {
-        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], &pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys[i]);
-        result = vkMapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys[i], 0, bufferSize, 0, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
-        TryThrowVulkanError(result);
-    }
+    pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
+    pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
+    pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
 }
 
 static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
 {
-    for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
-    {
-        vkUnmapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
-        DestroyBuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys[i]);
-    }
     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffers);
@@ -29,9 +16,12 @@ static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
 
 static void UpdateObjectUniformBuffer(GraphicEngine *pGraphicEngine)
 {
-    ObjectUniformBufferObject ubo;
-    glm_rotate(ubo.model, pGraphicEngine->frameCount * glm_rad(0.01f), (vec3){0.0f, 0.0f, 1.0f});
-    memcpy(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[pGraphicEngine->frameIndex], &ubo, sizeof(ubo));
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
+    {
+        ObjectUniformBufferObject ubo;
+        glm_rotate(ubo.model, pGraphicEngine->frameCount * glm_rad(0.01f), (vec3){0.0f, 0.0f, 1.0f});
+        memcpy(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i], &ubo, sizeof(ubo));
+    }
 }
 
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
@@ -616,7 +606,7 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
     pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets = TickernelMalloc(sizeof(VkDescriptorSet *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
     {
-        pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[i] = TickernelMalloc(sizeof(VkDescriptorSet) * pGraphicEngine->swapchainImageCount);
+        pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[i] = TickernelMalloc(sizeof(VkDescriptorSet) * pGraphicEngine->deferredRenderPipeline.maxObjectCount);
     }
 
     CreateGeometryPipeline(pGraphicEngine);
@@ -638,210 +628,206 @@ static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 }
 static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
 {
-    uint32_t poolSizeCount = 1;
     VkDescriptorPoolSize poolSize[] = {
         {
             .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = pGraphicEngine->swapchainImageCount,
+            .descriptorCount = 2,
         }};
     VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
-        .maxSets = pGraphicEngine->swapchainImageCount,
-        .poolSizeCount = poolSizeCount,
+        .maxSets = pGraphicEngine->deferredRenderPipeline.maxObjectCount,
+        .poolSizeCount = 1,
         .pPoolSizes = poolSize,
     };
     VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
-
     TryThrowVulkanError(result);
+}
+static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
+{
+    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+}
+
+void AddObject(GraphicEngine *pGraphicEngine)
+{
+    VkResult result = VK_SUCCESS;
     VkDescriptorSetAllocateInfo vkDescriptorSetAllocateInfo = {
         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
         .pNext = NULL,
         .descriptorPool = pGraphicEngine->deferredRenderPipeline.vkDescriptorPool,
-        .descriptorSetCount = pGraphicEngine->swapchainImageCount,
+        .descriptorSetCount = 2,
         .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0],
     };
     result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &vkDescriptorSetAllocateInfo, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
     TryThrowVulkanError(result);
 
-    for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
-    {
-        VkDescriptorBufferInfo globalUniformDescriptorBufferInfo = {
-            .buffer = pGraphicEngine->globalUniformBuffers[i],
-            .offset = 0,
-            .range = sizeof(GlobalUniformBufferObject),
-        };
-        VkDescriptorBufferInfo objectUniformDescriptorBufferInfo = {
-            .buffer = pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i],
-            .offset = 0,
-            .range = sizeof(ObjectUniformBufferObject),
-        };
-
-        VkWriteDescriptorSet descriptorWrites[] = {
-            {
-                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
-                .pNext = NULL,
-                .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
-                .dstBinding = 0,
-                .dstArrayElement = 0,
-                .descriptorCount = 1,
-                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-                .pImageInfo = NULL,
-                .pBufferInfo = &globalUniformDescriptorBufferInfo,
-                .pTexelBufferView = NULL,
-            },
-            {
-                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
-                .pNext = NULL,
-                .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
-                .dstBinding = 1,
-                .dstArrayElement = 0,
-                .descriptorCount = 1,
-                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-                .pImageInfo = NULL,
-                .pBufferInfo = &objectUniformDescriptorBufferInfo,
-                .pTexelBufferView = NULL,
-            },
-        };
-        vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 1, descriptorWrites, 0, NULL);
-    }
-}
-static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
-{
-    vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, pGraphicEngine->swapchainImageCount, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
-    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
-}
+    VkDescriptorBufferInfo globalUniformDescriptorBufferInfo = {
+        .buffer = pGraphicEngine->globalUniformBuffer,
+        .offset = 0,
+        .range = sizeof(GlobalUniformBufferObject),
+    };
+    VkDescriptorBufferInfo objectUniformDescriptorBufferInfo = {
+        .buffer = pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i],
+        .offset = 0,
+        .range = sizeof(ObjectUniformBufferObject),
+    };
 
-void AddObject(GraphicEngine *pGraphicEngine)
-{
-}
+    VkWriteDescriptorSet descriptorWrites[] = {
+        {
+            .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
+            .pNext = NULL,
+            .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
+            .dstBinding = 0,
+            .dstArrayElement = 0,
+            .descriptorCount = 1,
+            .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+            .pImageInfo = NULL,
+            .pBufferInfo = &globalUniformDescriptorBufferInfo,
+            .pTexelBufferView = NULL,
+        },
+        {
+            .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
+            .pNext = NULL,
+            .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
+            .dstBinding = 1,
+            .dstArrayElement = 0,
+            .descriptorCount = 1,
+            .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+            .pImageInfo = NULL,
+            .pBufferInfo = &objectUniformDescriptorBufferInfo,
+            .pTexelBufferView = NULL,
+        },
+    };
+    vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 1, descriptorWrites, 0, NULL);
 
-void RemoveObject(GraphicEngine *pGraphicEngine)
-{
-}
+    void RemoveObject(GraphicEngine * pGraphicEngine)
+    {
+        
+    }
 
-void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
-{
-    CreateVkRenderPass(pGraphicEngine);
-    CreateVkFramebuffers(pGraphicEngine);
-    CreateVkPipelines(pGraphicEngine);
-    CreateObjectUniformBuffers(pGraphicEngine);
-    CreateVkDescriptorSets(pGraphicEngine);
-}
-void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
-{
-    DestroyVkDescriptorSets(pGraphicEngine);
-    DestroyObjectUniformBuffers(pGraphicEngine);
-    DestroyVkPipelines(pGraphicEngine);
-    // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
-    DestroyVkRenderPass(pGraphicEngine);
-    DestroyVkFramebuffers(pGraphicEngine);
-}
+    void CreateDeferredRenderPipeline(GraphicEngine * pGraphicEngine)
+    {
+        pGraphicEngine->deferredRenderPipeline.maxObjectCount = 4096;
+        CreateVkRenderPass(pGraphicEngine);
+        CreateVkFramebuffers(pGraphicEngine);
+        CreateVkPipelines(pGraphicEngine);
+        CreateObjectUniformBuffers(pGraphicEngine);
+        CreateVkDescriptorSets(pGraphicEngine);
+    }
+    void DestroyDeferredRenderPipeline(GraphicEngine * pGraphicEngine)
+    {
+        DestroyVkDescriptorSets(pGraphicEngine);
+        DestroyObjectUniformBuffers(pGraphicEngine);
+        DestroyVkPipelines(pGraphicEngine);
+        // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+        DestroyVkRenderPass(pGraphicEngine);
+        DestroyVkFramebuffers(pGraphicEngine);
+    }
 
-void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
-{
-    UpdateObjectUniformBuffer(pGraphicEngine);
-    if (pGraphicEngine->hasRecreatedSwapchain)
+    void RecordDeferredRenderPipeline(GraphicEngine * pGraphicEngine)
     {
-        for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+        UpdateObjectUniformBuffer(pGraphicEngine);
+        if (pGraphicEngine->hasRecreatedSwapchain)
         {
-            if (pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
-            {
-                // continue;
-            }
-            else
+            for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
             {
-                vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
-                pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
+                if (pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
+                {
+                    // continue;
+                }
+                else
+                {
+                    vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
+                    pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
+                }
             }
         }
-    }
 
-    VkResult result = VK_SUCCESS;
-    RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
+        VkResult result = VK_SUCCESS;
+        RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
 
-    VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
-    VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
-        {
-            .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
-            .pNext = NULL,
-            .flags = 0,
-            .pInheritanceInfo = NULL,
-        };
-    result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
-    TryThrowVulkanError(result);
-    VkOffset2D offset =
-        {
-            .x = 0,
-            .y = 0,
-        };
-    VkRect2D renderArea =
-        {
-            .offset = offset,
-            .extent = pGraphicEngine->swapchainExtent,
+        VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
+        VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
+            {
+                .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
+                .pNext = NULL,
+                .flags = 0,
+                .pInheritanceInfo = NULL,
+            };
+        result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
+        TryThrowVulkanError(result);
+        VkOffset2D offset =
+            {
+                .x = 0,
+                .y = 0,
+            };
+        VkRect2D renderArea =
+            {
+                .offset = offset,
+                .extent = pGraphicEngine->swapchainExtent,
+            };
+        uint32_t clearValueCount = 2;
+        VkClearValue *clearValues = (VkClearValue[]){
+            {
+                .color = {0.0f, 0.0f, 0.0f, 1.0f},
+            },
+            {
+                .depthStencil = {1.0f, 0},
+            },
         };
-    uint32_t clearValueCount = 2;
-    VkClearValue *clearValues = (VkClearValue[]){
-        {
-            .color = {0.0f, 0.0f, 0.0f, 1.0f},
-        },
-        {
-            .depthStencil = {1.0f, 0},
-        },
-    };
 
-    PrepareCurrentFrambuffer(pGraphicEngine);
-    VkRenderPassBeginInfo renderPassBeginInfo =
-        {
-            .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
-            .pNext = NULL,
-            .renderPass = deferredRenderPipeline.vkRenderPass,
-            .framebuffer = pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
-            .renderArea = renderArea,
-            .clearValueCount = clearValueCount,
-            .pClearValues = clearValues,
-        };
-    vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
-    VkViewport viewport =
-        {
-            .x = 0.0f,
-            .y = 0.0f,
-            .width = pGraphicEngine->swapchainExtent.width,
-            .height = pGraphicEngine->swapchainExtent.height,
-            .minDepth = 0.0f,
-            .maxDepth = 1.0f,
-        };
-    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+        PrepareCurrentFrambuffer(pGraphicEngine);
+        VkRenderPassBeginInfo renderPassBeginInfo =
+            {
+                .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
+                .pNext = NULL,
+                .renderPass = deferredRenderPipeline.vkRenderPass,
+                .framebuffer = pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
+                .renderArea = renderArea,
+                .clearValueCount = clearValueCount,
+                .pClearValues = clearValues,
+            };
+        vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
+        vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
+        VkViewport viewport =
+            {
+                .x = 0.0f,
+                .y = 0.0f,
+                .width = pGraphicEngine->swapchainExtent.width,
+                .height = pGraphicEngine->swapchainExtent.height,
+                .minDepth = 0.0f,
+                .maxDepth = 1.0f,
+            };
+        vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
+
+        VkOffset2D scissorOffset =
+            {
+                .x = 0,
+                .y = 0,
+            };
+        VkRect2D scissor =
+            {
+                .offset = scissorOffset,
+                .extent = pGraphicEngine->swapchainExtent,
+            };
+        vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
 
-    VkOffset2D scissorOffset =
+        uint32_t geometryPipelineIndex = 0;
+        for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
         {
-            .x = 0,
-            .y = 0,
-        };
-    VkRect2D scissor =
-        {
-            .offset = scissorOffset,
-            .extent = pGraphicEngine->swapchainExtent,
-        };
-    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-
-    uint32_t geometryPipelineIndex = 0;
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
-    {
-        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[geometryPipelineIndex][pGraphicEngine->frameIndex], 0, NULL);
-        VkBuffer vertexBuffers[] = {pGraphicEngine->deferredRenderPipeline.vertexBuffers[i]};
-        VkDeviceSize offsets[] = {0};
-        vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
-        uint32_t vertexCount = pGraphicEngine->deferredRenderPipeline.vertexCounts[i];
-        vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
-    }
+            vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[geometryPipelineIndex][pGraphicEngine->frameIndex], 0, NULL);
+            VkBuffer vertexBuffers[] = {pGraphicEngine->deferredRenderPipeline.vertexBuffers[i]};
+            VkDeviceSize offsets[] = {0};
+            vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+            uint32_t vertexCount = pGraphicEngine->deferredRenderPipeline.vertexCounts[i];
+            vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
+        }
 
-    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);
-    // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+        // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);
+        // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
 
-    vkCmdEndRenderPass(vkCommandBuffer);
-    result = vkEndCommandBuffer(vkCommandBuffer);
-    TryThrowVulkanError(result);
-}
\ No newline at end of file
+        vkCmdEndRenderPass(vkCommandBuffer);
+        result = vkEndCommandBuffer(vkCommandBuffer);
+        TryThrowVulkanError(result);
+    }
\ No newline at end of file

commit c2a1ebf59ea06d91dc0c79092ea5fdbc110a9f07
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Sep 10 18:28:15 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index d7a84d5..96b8999 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -3,14 +3,14 @@
 static void CreateObjectUniformBuffers(GraphicEngine *pGraphicEngine)
 {
     pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->swapchainImageCount);
-    pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->swapchainImageCount);
+    pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->swapchainImageCount);
     pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->swapchainImageCount);
     size_t bufferSize = sizeof(ObjectUniformBufferObject);
     VkResult result = VK_SUCCESS;
     for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
     {
-        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], &pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories[i]);
-        result = vkMapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories[i], 0, bufferSize, 0, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
+        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], &pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys[i]);
+        result = vkMapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys[i], 0, bufferSize, 0, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
         TryThrowVulkanError(result);
     }
 }
@@ -20,10 +20,10 @@ static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
     for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
     {
         vkUnmapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
-        DestroyBuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories[i]);
+        DestroyBuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys[i]);
     }
     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemorys);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffers);
 }
 
@@ -712,6 +712,15 @@ static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
     vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, pGraphicEngine->swapchainImageCount, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
     vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
 }
+
+void AddObject(GraphicEngine *pGraphicEngine)
+{
+}
+
+void RemoveObject(GraphicEngine *pGraphicEngine)
+{
+}
+
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
@@ -817,16 +826,16 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
             .extent = pGraphicEngine->swapchainExtent,
         };
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-    VkBuffer vertexBuffers[] = {vertexBuffer};
-    VkDeviceSize offsets[] = {0};
-    vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+
+    uint32_t geometryPipelineIndex = 0;
     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
     {
-        uint32_t dynamicOffsetCount = 2;
-        uint32_t *pDynamicOffsets = {0, 0};
-        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][pGraphicEngine->frameIndex], 0, NULL);
-
-        vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[geometryPipelineIndex], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[geometryPipelineIndex][pGraphicEngine->frameIndex], 0, NULL);
+        VkBuffer vertexBuffers[] = {pGraphicEngine->deferredRenderPipeline.vertexBuffers[i]};
+        VkDeviceSize offsets[] = {0};
+        vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+        uint32_t vertexCount = pGraphicEngine->deferredRenderPipeline.vertexCounts[i];
+        vkCmdDraw(vkCommandBuffer, vertexCount, 1, 0, 0);
     }
 
     // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);

commit e12bc16ccf70600a09e7f8c5c0c11d6e65bb0fc8
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 9 01:28:26 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 96090b9..d7a84d5 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,5 +1,39 @@
 #include <deferredRenderPipeline.h>
 
+static void CreateObjectUniformBuffers(GraphicEngine *pGraphicEngine)
+{
+    pGraphicEngine->deferredRenderPipeline.objectUniformBuffers = TickernelMalloc(sizeof(VkBuffer) * pGraphicEngine->swapchainImageCount);
+    pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories = TickernelMalloc(sizeof(VkDeviceMemory) * pGraphicEngine->swapchainImageCount);
+    pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped = TickernelMalloc(sizeof(void *) * pGraphicEngine->swapchainImageCount);
+    size_t bufferSize = sizeof(ObjectUniformBufferObject);
+    VkResult result = VK_SUCCESS;
+    for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
+    {
+        CreateBuffer(pGraphicEngine, bufferSize, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], &pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories[i]);
+        result = vkMapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories[i], 0, bufferSize, 0, &pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
+        TryThrowVulkanError(result);
+    }
+}
+
+static void DestroyObjectUniformBuffers(GraphicEngine *pGraphicEngine)
+{
+    for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
+    {
+        vkUnmapMemory(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[i]);
+        DestroyBuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i], pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories[i]);
+    }
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBufferMemories);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.objectUniformBuffers);
+}
+
+static void UpdateObjectUniformBuffer(GraphicEngine *pGraphicEngine)
+{
+    ObjectUniformBufferObject ubo;
+    glm_rotate(ubo.model, pGraphicEngine->frameCount * glm_rad(0.01f), (vec3){0.0f, 0.0f, 1.0f});
+    memcpy(pGraphicEngine->deferredRenderPipeline.objectUniformBuffersMapped[pGraphicEngine->frameIndex], &ubo, sizeof(ubo));
+}
+
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
     uint32_t attachmentCount = 3;
@@ -604,18 +638,17 @@ static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 }
 static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
 {
-    uint32_t uniformCount = 2;
     uint32_t poolSizeCount = 1;
     VkDescriptorPoolSize poolSize[] = {
         {
             .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = uniformCount * pGraphicEngine->swapchainImageCount,
+            .descriptorCount = pGraphicEngine->swapchainImageCount,
         }};
     VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
-        .maxSets = uniformCount * pGraphicEngine->swapchainImageCount,
+        .maxSets = pGraphicEngine->swapchainImageCount,
         .poolSizeCount = poolSizeCount,
         .pPoolSizes = poolSize,
     };
@@ -631,10 +664,52 @@ static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
     };
     result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &vkDescriptorSetAllocateInfo, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
     TryThrowVulkanError(result);
+
+    for (uint32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
+    {
+        VkDescriptorBufferInfo globalUniformDescriptorBufferInfo = {
+            .buffer = pGraphicEngine->globalUniformBuffers[i],
+            .offset = 0,
+            .range = sizeof(GlobalUniformBufferObject),
+        };
+        VkDescriptorBufferInfo objectUniformDescriptorBufferInfo = {
+            .buffer = pGraphicEngine->deferredRenderPipeline.objectUniformBuffers[i],
+            .offset = 0,
+            .range = sizeof(ObjectUniformBufferObject),
+        };
+
+        VkWriteDescriptorSet descriptorWrites[] = {
+            {
+                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
+                .pNext = NULL,
+                .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
+                .dstBinding = 0,
+                .dstArrayElement = 0,
+                .descriptorCount = 1,
+                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+                .pImageInfo = NULL,
+                .pBufferInfo = &globalUniformDescriptorBufferInfo,
+                .pTexelBufferView = NULL,
+            },
+            {
+                .sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET,
+                .pNext = NULL,
+                .dstSet = pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][i],
+                .dstBinding = 1,
+                .dstArrayElement = 0,
+                .descriptorCount = 1,
+                .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+                .pImageInfo = NULL,
+                .pBufferInfo = &objectUniformDescriptorBufferInfo,
+                .pTexelBufferView = NULL,
+            },
+        };
+        vkUpdateDescriptorSets(pGraphicEngine->vkDevice, 1, descriptorWrites, 0, NULL);
+    }
 }
 static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
 {
-    vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, pGraphicEngine->swapchainImageCount, );
+    vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, pGraphicEngine->swapchainImageCount, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
     vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
 }
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -642,11 +717,13 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
     CreateVkPipelines(pGraphicEngine);
+    CreateObjectUniformBuffers(pGraphicEngine);
     CreateVkDescriptorSets(pGraphicEngine);
 }
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     DestroyVkDescriptorSets(pGraphicEngine);
+    DestroyObjectUniformBuffers(pGraphicEngine);
     DestroyVkPipelines(pGraphicEngine);
     // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
     DestroyVkRenderPass(pGraphicEngine);
@@ -655,6 +732,7 @@ void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    UpdateObjectUniformBuffer(pGraphicEngine);
     if (pGraphicEngine->hasRecreatedSwapchain)
     {
         for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
@@ -739,16 +817,19 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
             .extent = pGraphicEngine->swapchainExtent,
         };
     vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
-    // uint32_t firstBinding = 0;
-    // uint32_t bindingCount = 1;
-    // VkBuffer vertexBuffers[] = {vertexBuffer};
-    // VkDeviceSize offsets[] = {0};
-    // vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, vertexBuffers, offsets);
-    // vkCmdBindIndexBuffer(commandBuffer, indexBuffer, 0, VK_INDEX_TYPE_UINT32);
-    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0], 0, NULL);
-    // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+    VkBuffer vertexBuffers[] = {vertexBuffer};
+    VkDeviceSize offsets[] = {0};
+    vkCmdBindVertexBuffers(vkCommandBuffer, 0, 1, vertexBuffers, offsets);
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.objectCount; i++)
+    {
+        uint32_t dynamicOffsetCount = 2;
+        uint32_t *pDynamicOffsets = {0, 0};
+        vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0][pGraphicEngine->frameIndex], 0, NULL);
+
+        vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+    }
 
-    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1], 0, NULL);
+    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1][pGraphicEngine->frameIndex], 0, NULL);
     // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
 
     vkCmdEndRenderPass(vkCommandBuffer);

commit 70550b0e233f8627f18caaae1f48f3757b2e6e0b
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 6 18:47:30 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 1fabe9d..96090b9 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -351,18 +351,18 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .bindingCount = 2,
         .pBindings = bindings,
     };
-    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorSetLayouts[0]);
+    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0]);
     VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
         .setLayoutCount = 1,
-        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkDescriptorSetLayouts[0],
+        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0],
         .pushConstantRangeCount = 0,
         .pPushConstantRanges = NULL,
     };
 
-    result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0]);
+    result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0]);
     TryThrowVulkanError(result);
     VkGraphicsPipelineCreateInfo geometryPipelineCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
@@ -379,7 +379,7 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
         .pColorBlendState = &colorBlendStateCreateInfo,
         .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0],
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0],
         .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
         .subpass = 0,
         .basePipelineHandle = VK_NULL_HANDLE,
@@ -394,8 +394,8 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
 }
 static void DestroyGeometryPipeline(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorSetLayouts[0], NULL);
-    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0], NULL);
+    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0], NULL);
+    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0], NULL);
     vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[0], NULL);
 }
 static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
@@ -536,7 +536,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .dynamicStateCount = dynamicStateCount,
         .pDynamicStates = dynamicStates,
     };
-    pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[1] = NULL;
+    pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1] = NULL;
     VkGraphicsPipelineCreateInfo lightingPipelineCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
         .pNext = NULL,
@@ -552,7 +552,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
         .pColorBlendState = &colorBlendStateCreateInfo,
         .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[1],
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1],
         .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
         .subpass = 0,
         .basePipelineHandle = VK_NULL_HANDLE,
@@ -565,49 +565,92 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
     DestroyVkShaderModule(pGraphicEngine, lightingVertShaderModule);
     DestroyVkShaderModule(pGraphicEngine, lightingFragShaderModule);
 }
+static void DestroyLightingPipeline(GraphicEngine *pGraphicEngine)
+{
+    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[1], NULL);
+    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], NULL);
+    vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[1], NULL);
+}
 
 static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 {
     pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
-    pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
     pGraphicEngine->deferredRenderPipeline.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout = TickernelMalloc(sizeof(VkDescriptorSetLayout *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+
+    pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets = TickernelMalloc(sizeof(VkDescriptorSet *) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
+    {
+        pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[i] = TickernelMalloc(sizeof(VkDescriptorSet) * pGraphicEngine->swapchainImageCount);
+    }
+
     CreateGeometryPipeline(pGraphicEngine);
+    CreateLightingPipeline(pGraphicEngine);
 }
 
 static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 {
     DestroyGeometryPipeline(pGraphicEngine);
+    DestroyLightingPipeline(pGraphicEngine);
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
+    {
+        TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[i]);
+    }
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout);
 }
+static void CreateVkDescriptorSets(GraphicEngine *pGraphicEngine)
+{
+    uint32_t uniformCount = 2;
+    uint32_t poolSizeCount = 1;
+    VkDescriptorPoolSize poolSize[] = {
+        {
+            .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+            .descriptorCount = uniformCount * pGraphicEngine->swapchainImageCount,
+        }};
+    VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .maxSets = uniformCount * pGraphicEngine->swapchainImageCount,
+        .poolSizeCount = poolSizeCount,
+        .pPoolSizes = poolSize,
+    };
+    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
 
-void DestroyVkShaderModule(GraphicEngine *pGraphicEngine, VkShaderModule vkShaderModule)
+    TryThrowVulkanError(result);
+    VkDescriptorSetAllocateInfo vkDescriptorSetAllocateInfo = {
+        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO,
+        .pNext = NULL,
+        .descriptorPool = pGraphicEngine->deferredRenderPipeline.vkDescriptorPool,
+        .descriptorSetCount = pGraphicEngine->swapchainImageCount,
+        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSetLayout[0],
+    };
+    result = vkAllocateDescriptorSets(pGraphicEngine->vkDevice, &vkDescriptorSetAllocateInfo, pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0]);
+    TryThrowVulkanError(result);
+}
+static void DestroyVkDescriptorSets(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyShaderModule(pGraphicEngine->vkDevice, vkShaderModule, NULL);
+    vkFreeDescriptorSets(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, pGraphicEngine->swapchainImageCount, );
+    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
 }
-
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
-    CreateGeometryPipeline(pGraphicEngine);
-
-    // uint32_t poolSizeCount = 1;
-    // VkDescriptorPoolSize poolSize[] = {
-    //     {
-    //         .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-    //         .descriptorCount = pGraphicEngine->swapchainImageCount * 2,
-    //     }};
-    // VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
-    //     .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
-    //     .pNext = NULL,
-    //     .flags = 0,
-    //     .maxSets = pGraphicEngine->swapchainImageCount,
-    //     .poolSizeCount = poolSizeCount,
-    //     .pPoolSizes = poolSize,
-    // };
-    // VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
-    // TryThrowVulkanError(result);
+    CreateVkPipelines(pGraphicEngine);
+    CreateVkDescriptorSets(pGraphicEngine);
+}
+void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    DestroyVkDescriptorSets(pGraphicEngine);
+    DestroyVkPipelines(pGraphicEngine);
+    // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+    DestroyVkRenderPass(pGraphicEngine);
+    DestroyVkFramebuffers(pGraphicEngine);
 }
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -702,16 +745,13 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     // VkDeviceSize offsets[] = {0};
     // vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, vertexBuffers, offsets);
     // vkCmdBindIndexBuffer(commandBuffer, indexBuffer, 0, VK_INDEX_TYPE_UINT32);
-    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout, 0, 1, &descriptorSets[currentFrameIndex], 0, NULL);
+    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[0], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[0], 0, NULL);
+    // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+
+    vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipeline2Layout[1], 0, 1, &pGraphicEngine->deferredRenderPipeline.vkPipeline2DescriptorSets[1], 0, NULL);
+    // vkCmdDraw(vkCommandBuffer, verticesCount, 1, 0, 0);
+
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);
-}
-
-void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
-{
-    DestroyGeometryPipeline(pGraphicEngine);
-    // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
-    DestroyVkRenderPass(pGraphicEngine);
-    DestroyVkFramebuffers(pGraphicEngine);
-}
+}
\ No newline at end of file

commit fc6a913fef252333a4cb8589949c8871f9302b43
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Sep 6 01:07:30 2024 +0800

    Update deferredRenderPipeline.c

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 2a92216..1fabe9d 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -351,13 +351,13 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .bindingCount = 2,
         .pBindings = bindings,
     };
-    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &descriptorSetLayout);
+    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorSetLayouts[0]);
     VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
         .setLayoutCount = 1,
-        .pSetLayouts = &descriptorSetLayout,
+        .pSetLayouts = &pGraphicEngine->deferredRenderPipeline.vkDescriptorSetLayouts[0],
         .pushConstantRangeCount = 0,
         .pPushConstantRanges = NULL,
     };
@@ -389,12 +389,12 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
     VkPipelineCache pipelineCache = NULL;
     result = vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, 1, &geometryPipelineCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
     TryThrowVulkanError(result);
-    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, descriptorSetLayout, NULL);
     DestroyVkShaderModule(pGraphicEngine, geometryVertShaderModule);
     DestroyVkShaderModule(pGraphicEngine, geometryFragShaderModule);
 }
 static void DestroyGeometryPipeline(GraphicEngine *pGraphicEngine)
 {
+    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorSetLayouts[0], NULL);
     vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0], NULL);
     vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[0], NULL);
 }

commit 9aabf4dad79e7dd36f96fcd4c41d45804ea5921a
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 5 18:32:26 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 9411417..2a92216 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -21,6 +21,7 @@ static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
         TryThrowVulkanError(result);
     }
 }
+
 static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
 {
     VkAttachmentDescription colorAttachmentDescription = {
@@ -142,7 +143,6 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
     result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkRenderPass);
     TryThrowVulkanError(result);
 }
-
 static void DestroyVkRenderPass(GraphicEngine *pGraphicEngine)
 {
     vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkRenderPass, NULL);
@@ -232,7 +232,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .vertexAttributeDescriptionCount = vertexAttributeDescriptionCount,
         .pVertexAttributeDescriptions = vertexAttributeDescriptions,
     };
-
     VkPipelineInputAssemblyStateCreateInfo pipelineInputAssemblyStateCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
         .pNext = NULL,
@@ -240,7 +239,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
         .primitiveRestartEnable = VK_FALSE,
     };
-
     VkViewport viewport = {
         .x = 0.0f,
         .y = 0.0f,
@@ -249,7 +247,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .minDepth = 0.0f,
         .maxDepth = 1.0f,
     };
-
     VkOffset2D offset = {
         .x = 0,
         .y = 0,
@@ -267,7 +264,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .scissorCount = 1,
         .pScissors = &scissor,
     };
-
     VkPipelineRasterizationStateCreateInfo pipelineRasterizationStateCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
         .pNext = NULL,
@@ -282,7 +278,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .depthBiasSlopeFactor = 0,
         .lineWidth = 1.0f,
     };
-
     VkPipelineDepthStencilStateCreateInfo pipelineDepthStencilStateCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
         .pNext = NULL,
@@ -297,7 +292,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .minDepthBounds = 0,
         .maxDepthBounds = 1,
     };
-
     VkPipelineColorBlendAttachmentState pipelineColorBlendAttachmentState = {
         .blendEnable = VK_TRUE,
         .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
@@ -321,7 +315,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .blendConstants[2] = 0.0f,
         .blendConstants[3] = 0.0f,
     };
-
     uint32_t dynamicStateCount = 2;
     VkDynamicState dynamicStates[] = {
         VK_DYNAMIC_STATE_VIEWPORT,
@@ -335,22 +328,27 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .pDynamicStates = dynamicStates,
     };
 
-    VkDescriptorSetLayoutBinding uboLayoutBinding = {
+    VkDescriptorSetLayoutBinding globalUniformLayoutBinding = {
         .binding = 0,
         .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
         .descriptorCount = 1,
         .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
         .pImmutableSamplers = NULL,
     };
-
+    VkDescriptorSetLayoutBinding objectUniformLayoutBinding = {
+        .binding = 1,
+        .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+        .descriptorCount = 1,
+        .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
+        .pImmutableSamplers = NULL,
+    };
     TryThrowVulkanError(result);
-    VkDescriptorSetLayout descriptorSetLayout;
-    VkDescriptorSetLayoutBinding *bindings = (VkDescriptorSetLayoutBinding[]){uboLayoutBinding};
+    VkDescriptorSetLayoutBinding *bindings = (VkDescriptorSetLayoutBinding[]){globalUniformLayoutBinding, objectUniformLayoutBinding};
     VkDescriptorSetLayoutCreateInfo descriptorSetLayoutCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
-        .bindingCount = 1,
+        .bindingCount = 2,
         .pBindings = bindings,
     };
     result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &descriptorSetLayout);
@@ -395,7 +393,11 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
     DestroyVkShaderModule(pGraphicEngine, geometryVertShaderModule);
     DestroyVkShaderModule(pGraphicEngine, geometryFragShaderModule);
 }
-
+static void DestroyGeometryPipeline(GraphicEngine *pGraphicEngine)
+{
+    vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0], NULL);
+    vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[0], NULL);
+}
 static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
 {
     VkResult result = VK_SUCCESS;
@@ -568,21 +570,15 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 {
     pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
     pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-
     pGraphicEngine->deferredRenderPipeline.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    CreateGeometryPipeline(pGraphicEngine);
 }
+
 static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 {
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
-    {
-        vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[i], NULL);
-    }
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
-    {
-        vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[i], NULL);
-    }
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts);
+    DestroyGeometryPipeline(pGraphicEngine);
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts);
 }
 
 void DestroyVkShaderModule(GraphicEngine *pGraphicEngine, VkShaderModule vkShaderModule)
@@ -594,21 +590,24 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
-    uint32_t poolSizeCount = 1;
-    VkDescriptorPoolSize poolSize[] = {
-        {
-            .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
-            .descriptorCount = pGraphicEngine->swapchainImageCount * 2,
-        }};
-    VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
-        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
-        .pNext = NULL,
-        .flags = 0,
-        .maxSets = pGraphicEngine->swapchainImageCount,
-        .poolSizeCount = poolSizeCount,
-        .pPoolSizes = poolSize,
-    };
-    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
+    CreateGeometryPipeline(pGraphicEngine);
+
+    // uint32_t poolSizeCount = 1;
+    // VkDescriptorPoolSize poolSize[] = {
+    //     {
+    //         .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+    //         .descriptorCount = pGraphicEngine->swapchainImageCount * 2,
+    //     }};
+    // VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
+    //     .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
+    //     .pNext = NULL,
+    //     .flags = 0,
+    //     .maxSets = pGraphicEngine->swapchainImageCount,
+    //     .poolSizeCount = poolSizeCount,
+    //     .pPoolSizes = poolSize,
+    // };
+    // VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
+    // TryThrowVulkanError(result);
 }
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -674,8 +673,36 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
             .pClearValues = clearValues,
         };
     vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
-    // vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vkPipeline);
+    vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
+    VkViewport viewport =
+        {
+            .x = 0.0f,
+            .y = 0.0f,
+            .width = pGraphicEngine->swapchainExtent.width,
+            .height = pGraphicEngine->swapchainExtent.height,
+            .minDepth = 0.0f,
+            .maxDepth = 1.0f,
+        };
+    vkCmdSetViewport(vkCommandBuffer, 0, 1, &viewport);
 
+    VkOffset2D scissorOffset =
+        {
+            .x = 0,
+            .y = 0,
+        };
+    VkRect2D scissor =
+        {
+            .offset = scissorOffset,
+            .extent = pGraphicEngine->swapchainExtent,
+        };
+    vkCmdSetScissor(vkCommandBuffer, 0, 1, &scissor);
+    // uint32_t firstBinding = 0;
+    // uint32_t bindingCount = 1;
+    // VkBuffer vertexBuffers[] = {vertexBuffer};
+    // VkDeviceSize offsets[] = {0};
+    // vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, vertexBuffers, offsets);
+    // vkCmdBindIndexBuffer(commandBuffer, indexBuffer, 0, VK_INDEX_TYPE_UINT32);
+    // vkCmdBindDescriptorSets(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout, 0, 1, &descriptorSets[currentFrameIndex], 0, NULL);
     vkCmdEndRenderPass(vkCommandBuffer);
     result = vkEndCommandBuffer(vkCommandBuffer);
     TryThrowVulkanError(result);
@@ -683,7 +710,8 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
+    DestroyGeometryPipeline(pGraphicEngine);
+    // vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
     DestroyVkRenderPass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
 }

commit 9a7f2d877796dda21e24698f5d902864dc1ecea8
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Sep 5 01:46:17 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index fa02eed..9411417 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,4 +1,5 @@
 #include <deferredRenderPipeline.h>
+
 static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
 {
     uint32_t attachmentCount = 3;
@@ -141,6 +142,7 @@ static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
     result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkRenderPass);
     TryThrowVulkanError(result);
 }
+
 static void DestroyVkRenderPass(GraphicEngine *pGraphicEngine)
 {
     vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkRenderPass, NULL);
@@ -341,6 +343,7 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .pImmutableSamplers = NULL,
     };
 
+    TryThrowVulkanError(result);
     VkDescriptorSetLayout descriptorSetLayout;
     VkDescriptorSetLayoutBinding *bindings = (VkDescriptorSetLayoutBinding[]){uboLayoutBinding};
     VkDescriptorSetLayoutCreateInfo descriptorSetLayoutCreateInfo = {
@@ -351,7 +354,6 @@ static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
         .pBindings = bindings,
     };
     result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &descriptorSetLayout);
-
     VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
         .pNext = NULL,
@@ -592,6 +594,21 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     CreateVkRenderPass(pGraphicEngine);
     CreateVkFramebuffers(pGraphicEngine);
+    uint32_t poolSizeCount = 1;
+    VkDescriptorPoolSize poolSize[] = {
+        {
+            .type = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+            .descriptorCount = pGraphicEngine->swapchainImageCount * 2,
+        }};
+    VkDescriptorPoolCreateInfo descriptorPoolCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .maxSets = pGraphicEngine->swapchainImageCount,
+        .poolSizeCount = poolSizeCount,
+        .pPoolSizes = poolSize,
+    };
+    VkResult result = vkCreateDescriptorPool(pGraphicEngine->vkDevice, &descriptorPoolCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkDescriptorPool);
 }
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -666,6 +683,7 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    vkDestroyDescriptorPool(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkDescriptorPool, NULL);
     DestroyVkRenderPass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
 }

commit 4173e2fa9348e3a82661d2b95757b9092459c6cf
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Sep 2 00:05:58 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index b191485..fa02eed 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -532,6 +532,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .dynamicStateCount = dynamicStateCount,
         .pDynamicStates = dynamicStates,
     };
+    pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[1] = NULL;
     VkGraphicsPipelineCreateInfo lightingPipelineCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
         .pNext = NULL,
@@ -547,7 +548,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
         .pColorBlendState = &colorBlendStateCreateInfo,
         .pDynamicState = &dynamicState,
-        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0],
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[1],
         .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
         .subpass = 0,
         .basePipelineHandle = VK_NULL_HANDLE,
@@ -565,6 +566,7 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 {
     pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
     pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+
     pGraphicEngine->deferredRenderPipeline.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
 }
 static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)

commit 4f55508dcaa90ca95e13155bc53c2d0c8a93f3f2
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Aug 26 18:11:55 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 8cee8be..b191485 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -437,7 +437,7 @@ static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
         .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
-        .topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
+        .topology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST,
         .primitiveRestartEnable = VK_FALSE,
     };
     VkViewport viewport = {

commit 691c4d267f49abb9281b77dbe45fdeee78226bd7
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Aug 26 00:51:01 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index a1abed4..8cee8be 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -594,6 +594,22 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    if (pGraphicEngine->hasRecreatedSwapchain)
+    {
+        for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+        {
+            if (pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] == INVALID_VKFRAMEBUFFER)
+            {
+                // continue;
+            }
+            else
+            {
+                vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
+                pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
+            }
+        }
+    }
+
     VkResult result = VK_SUCCESS;
     RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
 
@@ -650,4 +666,4 @@ void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
     DestroyVkRenderPass(pGraphicEngine);
     DestroyVkFramebuffers(pGraphicEngine);
-}
\ No newline at end of file
+}

commit b8563a8e017ad2132afcba912f95976204fd5f55
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Sun Aug 25 02:43:21 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 114b41d..a1abed4 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -170,11 +170,8 @@ static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
     }
 }
 
-static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
+static void CreateGeometryPipeline(GraphicEngine *pGraphicEngine)
 {
-    pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
-    pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
-
     VkResult result = VK_SUCCESS;
     VkShaderModule geometryVertShaderModule;
     CreateVkShaderModule(pGraphicEngine, "../shaders/geometry.vert", &geometryVertShaderModule);
@@ -367,7 +364,7 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
 
     result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0]);
     TryThrowVulkanError(result);
-    VkGraphicsPipelineCreateInfo geometryPipeline = {
+    VkGraphicsPipelineCreateInfo geometryPipelineCreateInfo = {
         .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
         .pNext = NULL,
         .flags = 0,
@@ -388,20 +385,188 @@ static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
         .basePipelineHandle = VK_NULL_HANDLE,
         .basePipelineIndex = 0,
     };
-    VkGraphicsPipelineCreateInfo lightingPipeline = {
 
-    };
     VkPipelineCache pipelineCache = NULL;
-    VkGraphicsPipelineCreateInfo vkGraphicsPipelineCreateInfos[] = {
-        geometryPipeline,
-        lightingPipeline,
-    };
-    vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, pGraphicEngine->deferredRenderPipeline.vkPipelineCount, vkGraphicsPipelineCreateInfos, NULL, pGraphicEngine->deferredRenderPipeline.vkPipelines);
-
+    result = vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, 1, &geometryPipelineCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelines[0]);
+    TryThrowVulkanError(result);
     vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, descriptorSetLayout, NULL);
     DestroyVkShaderModule(pGraphicEngine, geometryVertShaderModule);
     DestroyVkShaderModule(pGraphicEngine, geometryFragShaderModule);
 }
+
+static void CreateLightingPipeline(GraphicEngine *pGraphicEngine)
+{
+    VkResult result = VK_SUCCESS;
+    VkShaderModule lightingVertShaderModule;
+    CreateVkShaderModule(pGraphicEngine, "../shaders/lighting.vert", &lightingVertShaderModule);
+    VkPipelineShaderStageCreateInfo vertShaderStageCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .stage = VK_SHADER_STAGE_VERTEX_BIT,
+        .module = lightingVertShaderModule,
+        .pName = "main",
+        .pSpecializationInfo = NULL,
+    };
+
+    VkShaderModule lightingFragShaderModule;
+    CreateVkShaderModule(pGraphicEngine, "../shaders/lighting.frag", &lightingFragShaderModule);
+    VkPipelineShaderStageCreateInfo fragShaderStageCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .stage = VK_SHADER_STAGE_FRAGMENT_BIT,
+        .module = lightingFragShaderModule,
+        .pName = "main",
+        .pSpecializationInfo = NULL,
+    };
+    uint32_t stageCount = 2;
+    VkPipelineShaderStageCreateInfo *pipelineShaderStageCreateInfos = (VkPipelineShaderStageCreateInfo[]){vertShaderStageCreateInfo, fragShaderStageCreateInfo};
+
+    VkPipelineVertexInputStateCreateInfo vkPipelineVertexInputStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .vertexBindingDescriptionCount = 0,
+        .pVertexBindingDescriptions = NULL,
+        .vertexAttributeDescriptionCount = 0,
+        .pVertexAttributeDescriptions = NULL,
+    };
+
+    VkPipelineInputAssemblyStateCreateInfo pipelineInputAssemblyStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
+        .primitiveRestartEnable = VK_FALSE,
+    };
+    VkViewport viewport = {
+        .x = 0.0f,
+        .y = 0.0f,
+        .width = pGraphicEngine->swapchainExtent.width,
+        .height = pGraphicEngine->swapchainExtent.height,
+        .minDepth = 0.0f,
+        .maxDepth = 1.0f,
+    };
+    VkOffset2D offset = {
+        .x = 0,
+        .y = 0,
+    };
+    VkRect2D scissor = {
+        .offset = offset,
+        .extent = pGraphicEngine->swapchainExtent,
+    };
+    VkPipelineViewportStateCreateInfo pipelineViewportStateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .viewportCount = 1,
+        .pViewports = &viewport,
+        .scissorCount = 1,
+        .pScissors = &scissor,
+    };
+    VkPipelineRasterizationStateCreateInfo pipelineRasterizationStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .rasterizerDiscardEnable = VK_FALSE,
+        .polygonMode = VK_POLYGON_MODE_FILL,
+        .cullMode = VK_CULL_MODE_NONE,
+        .frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE,
+        .depthBiasEnable = VK_FALSE,
+        .depthBiasConstantFactor = 0,
+        .depthBiasClamp = VK_FALSE,
+        .depthBiasSlopeFactor = 0,
+        .lineWidth = 1.0f,
+    };
+
+    VkPipelineDepthStencilStateCreateInfo pipelineDepthStencilStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .depthTestEnable = VK_FALSE,
+        .depthWriteEnable = VK_FALSE,
+        .depthCompareOp = VK_COMPARE_OP_ALWAYS,
+        .depthBoundsTestEnable = VK_FALSE,
+        .stencilTestEnable = VK_FALSE,
+        .front = {},
+        .back = {},
+        .minDepthBounds = 0,
+        .maxDepthBounds = 1,
+    };
+
+    VkPipelineColorBlendAttachmentState pipelineColorBlendAttachmentState = {
+        .blendEnable = false,
+        .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
+        .dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
+        .colorBlendOp = VK_BLEND_OP_ADD,
+        .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
+        .dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO,
+        .alphaBlendOp = VK_BLEND_OP_ADD,
+        .colorWriteMask = VK_COLOR_COMPONENT_A_BIT | VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT,
+    };
+
+    VkPipelineColorBlendStateCreateInfo colorBlendStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .logicOpEnable = VK_FALSE,
+        .logicOp = VK_LOGIC_OP_COPY,
+        .attachmentCount = 1,
+        .pAttachments = &pipelineColorBlendAttachmentState,
+        .blendConstants[0] = 0.0f,
+        .blendConstants[1] = 0.0f,
+        .blendConstants[2] = 0.0f,
+        .blendConstants[3] = 0.0f,
+    };
+
+    uint32_t dynamicStateCount = 2;
+    VkDynamicState dynamicStates[] = {
+        VK_DYNAMIC_STATE_VIEWPORT,
+        VK_DYNAMIC_STATE_SCISSOR,
+    };
+    VkPipelineDynamicStateCreateInfo dynamicState = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .dynamicStateCount = dynamicStateCount,
+        .pDynamicStates = dynamicStates,
+    };
+    VkGraphicsPipelineCreateInfo lightingPipelineCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .stageCount = stageCount,
+        .pStages = pipelineShaderStageCreateInfos,
+        .pVertexInputState = &vkPipelineVertexInputStateCreateInfo,
+        .pInputAssemblyState = &pipelineInputAssemblyStateCreateInfo,
+        .pTessellationState = NULL,
+        .pViewportState = &pipelineViewportStateInfo,
+        .pRasterizationState = &pipelineRasterizationStateCreateInfo,
+        .pMultisampleState = NULL,
+        .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
+        .pColorBlendState = &colorBlendStateCreateInfo,
+        .pDynamicState = &dynamicState,
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0],
+        .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
+        .subpass = 0,
+        .basePipelineHandle = VK_NULL_HANDLE,
+        .basePipelineIndex = 0,
+    };
+
+    VkPipelineCache pipelineCache = NULL;
+    result = vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, 1, &lightingPipelineCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelines[1]);
+    TryThrowVulkanError(result);
+    DestroyVkShaderModule(pGraphicEngine, lightingVertShaderModule);
+    DestroyVkShaderModule(pGraphicEngine, lightingFragShaderModule);
+}
+
+static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
+{
+    pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
+    pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+    pGraphicEngine->deferredRenderPipeline.vkPipelines = TickernelMalloc(sizeof(VkPipeline) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+}
 static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
 {
     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
@@ -413,7 +578,7 @@ static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
         vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[i], NULL);
     }
     TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts);
-
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelines);
 }
 
 void DestroyVkShaderModule(GraphicEngine *pGraphicEngine, VkShaderModule vkShaderModule)

commit 07c33d9e79df98d6985d7269732f2fecc662335f
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Aug 23 18:47:39 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 5735354..114b41d 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,6 +1,26 @@
 #include <deferredRenderPipeline.h>
-
-void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage)
+static void PrepareCurrentFrambuffer(GraphicEngine *pGraphicEngine)
+{
+    uint32_t attachmentCount = 3;
+    VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[pGraphicEngine->frameIndex], pGraphicEngine->depthGraphicImage.vkImageView, pGraphicEngine->albedoGraphicImage.vkImageView};
+    if (INVALID_VKFRAMEBUFFER == pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex])
+    {
+        VkFramebufferCreateInfo vkFramebufferCreateInfo = {
+            .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+            .pNext = NULL,
+            .flags = 0,
+            .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
+            .attachmentCount = attachmentCount,
+            .pAttachments = attachments,
+            .width = pGraphicEngine->swapchainExtent.width,
+            .height = pGraphicEngine->swapchainExtent.height,
+            .layers = 1,
+        };
+        VkResult result = vkCreateFramebuffer(pGraphicEngine->vkDevice, &vkFramebufferCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex]);
+        TryThrowVulkanError(result);
+    }
+}
+static void CreateVkRenderPass(GraphicEngine *pGraphicEngine)
 {
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
@@ -15,7 +35,7 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage de
     };
     VkAttachmentDescription depthAttachmentDescription = {
         .flags = 0,
-        .format = depthGraphicImage.vkFormat,
+        .format = pGraphicEngine->depthGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -26,7 +46,7 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage de
     };
     VkAttachmentDescription albedoAttachmentDescription = {
         .flags = 0,
-        .format = albedoGraphicImage.vkFormat,
+        .format = pGraphicEngine->albedoGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -120,33 +140,291 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage de
     VkResult result = VK_SUCCESS;
     result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkRenderPass);
     TryThrowVulkanError(result);
+}
+static void DestroyVkRenderPass(GraphicEngine *pGraphicEngine)
+{
+    vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkRenderPass, NULL);
+}
 
+static void CreateVkFramebuffers(GraphicEngine *pGraphicEngine)
+{
+    pGraphicEngine->deferredRenderPipeline.vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pGraphicEngine->swapchainImageCount);
+    pGraphicEngine->deferredRenderPipeline.vkFramebufferCount = pGraphicEngine->swapchainImageCount;
+    for (int32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+    {
+        pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i] = INVALID_VKFRAMEBUFFER;
+    }
+}
+static void DestroyVkFramebuffers(GraphicEngine *pGraphicEngine)
+{
+    for (int32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkFramebufferCount; i++)
+    {
+        if (INVALID_VKFRAMEBUFFER == pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i])
+        {
+            // continue;
+        }
+        else
+        {
+            vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
+        }
+    }
+}
+
+static void CreateVkPipelines(GraphicEngine *pGraphicEngine)
+{
     pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
+    pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts = TickernelMalloc(sizeof(VkPipelineLayout) * pGraphicEngine->deferredRenderPipeline.vkPipelineCount);
+
+    VkResult result = VK_SUCCESS;
+    VkShaderModule geometryVertShaderModule;
+    CreateVkShaderModule(pGraphicEngine, "../shaders/geometry.vert", &geometryVertShaderModule);
+    VkPipelineShaderStageCreateInfo vertShaderStageCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .stage = VK_SHADER_STAGE_VERTEX_BIT,
+        .module = geometryVertShaderModule,
+        .pName = "main",
+        .pSpecializationInfo = NULL,
+    };
+
+    VkShaderModule geometryFragShaderModule;
+    CreateVkShaderModule(pGraphicEngine, "../shaders/geometry.frag", &geometryFragShaderModule);
+    VkPipelineShaderStageCreateInfo fragShaderStageCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .stage = VK_SHADER_STAGE_FRAGMENT_BIT,
+        .module = geometryFragShaderModule,
+        .pName = "main",
+        .pSpecializationInfo = NULL,
+    };
+    uint32_t stageCount = 2;
+    VkPipelineShaderStageCreateInfo *pipelineShaderStageCreateInfos = (VkPipelineShaderStageCreateInfo[]){vertShaderStageCreateInfo, fragShaderStageCreateInfo};
+
+    uint32_t vertexBindingDescriptionCount = 1;
+    VkVertexInputBindingDescription *vertexBindingDescriptions = (VkVertexInputBindingDescription[]){
+        {
+            .binding = 0,
+            .stride = sizeof(DeferredRenderPipelineVertex),
+            .inputRate = VK_VERTEX_INPUT_RATE_VERTEX,
+        },
+    };
+    uint32_t vertexAttributeDescriptionCount = 3;
+    VkVertexInputAttributeDescription vertexAttributeDescriptions[] = {
+        {
+            .location = 0,
+            .binding = 0,
+            .format = VK_FORMAT_R32G32B32_SFLOAT,
+            .offset = offsetof(DeferredRenderPipelineVertex, position),
+        },
+        {
+            .location = 1,
+            .binding = 0,
+            .format = VK_FORMAT_R32G32B32_SFLOAT,
+            .offset = offsetof(DeferredRenderPipelineVertex, color),
+        }};
+    VkPipelineVertexInputStateCreateInfo vkPipelineVertexInputStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .vertexBindingDescriptionCount = vertexBindingDescriptionCount,
+        .pVertexBindingDescriptions = vertexBindingDescriptions,
+        .vertexAttributeDescriptionCount = vertexAttributeDescriptionCount,
+        .pVertexAttributeDescriptions = vertexAttributeDescriptions,
+    };
+
+    VkPipelineInputAssemblyStateCreateInfo pipelineInputAssemblyStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .topology = VK_PRIMITIVE_TOPOLOGY_POINT_LIST,
+        .primitiveRestartEnable = VK_FALSE,
+    };
+
+    VkViewport viewport = {
+        .x = 0.0f,
+        .y = 0.0f,
+        .width = pGraphicEngine->swapchainExtent.width,
+        .height = pGraphicEngine->swapchainExtent.height,
+        .minDepth = 0.0f,
+        .maxDepth = 1.0f,
+    };
+
+    VkOffset2D offset = {
+        .x = 0,
+        .y = 0,
+    };
+    VkRect2D scissor = {
+        .offset = offset,
+        .extent = pGraphicEngine->swapchainExtent,
+    };
+    VkPipelineViewportStateCreateInfo pipelineViewportStateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .viewportCount = 1,
+        .pViewports = &viewport,
+        .scissorCount = 1,
+        .pScissors = &scissor,
+    };
+
+    VkPipelineRasterizationStateCreateInfo pipelineRasterizationStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .rasterizerDiscardEnable = VK_FALSE,
+        .polygonMode = VK_POLYGON_MODE_POINT,
+        .cullMode = VK_CULL_MODE_NONE,
+        .frontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE,
+        .depthBiasEnable = VK_FALSE,
+        .depthBiasConstantFactor = 0,
+        .depthBiasClamp = VK_FALSE,
+        .depthBiasSlopeFactor = 0,
+        .lineWidth = 1.0f,
+    };
+
+    VkPipelineDepthStencilStateCreateInfo pipelineDepthStencilStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .depthTestEnable = VK_TRUE,
+        .depthWriteEnable = VK_TRUE,
+        .depthCompareOp = VK_COMPARE_OP_LESS,
+        .depthBoundsTestEnable = VK_FALSE,
+        .stencilTestEnable = VK_FALSE,
+        .front = {},
+        .back = {},
+        .minDepthBounds = 0,
+        .maxDepthBounds = 1,
+    };
+
+    VkPipelineColorBlendAttachmentState pipelineColorBlendAttachmentState = {
+        .blendEnable = VK_TRUE,
+        .srcColorBlendFactor = VK_BLEND_FACTOR_SRC_ALPHA,
+        .dstColorBlendFactor = VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
+        .colorBlendOp = VK_BLEND_OP_ADD,
+        .srcAlphaBlendFactor = VK_BLEND_FACTOR_ONE,
+        .dstAlphaBlendFactor = VK_BLEND_FACTOR_ZERO,
+        .alphaBlendOp = VK_BLEND_OP_ADD,
+        .colorWriteMask = VK_COLOR_COMPONENT_A_BIT | VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT,
+    };
+    VkPipelineColorBlendStateCreateInfo colorBlendStateCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .logicOpEnable = VK_FALSE,
+        .logicOp = VK_LOGIC_OP_COPY,
+        .attachmentCount = 1,
+        .pAttachments = &pipelineColorBlendAttachmentState,
+        .blendConstants[0] = 0.0f,
+        .blendConstants[1] = 0.0f,
+        .blendConstants[2] = 0.0f,
+        .blendConstants[3] = 0.0f,
+    };
+
+    uint32_t dynamicStateCount = 2;
+    VkDynamicState dynamicStates[] = {
+        VK_DYNAMIC_STATE_VIEWPORT,
+        VK_DYNAMIC_STATE_SCISSOR,
+    };
+    VkPipelineDynamicStateCreateInfo dynamicState = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .dynamicStateCount = dynamicStateCount,
+        .pDynamicStates = dynamicStates,
+    };
+
+    VkDescriptorSetLayoutBinding uboLayoutBinding = {
+        .binding = 0,
+        .descriptorType = VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
+        .descriptorCount = 1,
+        .stageFlags = VK_SHADER_STAGE_VERTEX_BIT,
+        .pImmutableSamplers = NULL,
+    };
+
+    VkDescriptorSetLayout descriptorSetLayout;
+    VkDescriptorSetLayoutBinding *bindings = (VkDescriptorSetLayoutBinding[]){uboLayoutBinding};
+    VkDescriptorSetLayoutCreateInfo descriptorSetLayoutCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .bindingCount = 1,
+        .pBindings = bindings,
+    };
+    result = vkCreateDescriptorSetLayout(pGraphicEngine->vkDevice, &descriptorSetLayoutCreateInfo, NULL, &descriptorSetLayout);
+
+    VkPipelineLayoutCreateInfo pipelineLayoutCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .setLayoutCount = 1,
+        .pSetLayouts = &descriptorSetLayout,
+        .pushConstantRangeCount = 0,
+        .pPushConstantRanges = NULL,
+    };
+
+    result = vkCreatePipelineLayout(pGraphicEngine->vkDevice, &pipelineLayoutCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0]);
+    TryThrowVulkanError(result);
+    VkGraphicsPipelineCreateInfo geometryPipeline = {
+        .sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .stageCount = stageCount,
+        .pStages = pipelineShaderStageCreateInfos,
+        .pVertexInputState = &vkPipelineVertexInputStateCreateInfo,
+        .pInputAssemblyState = &pipelineInputAssemblyStateCreateInfo,
+        .pTessellationState = NULL,
+        .pViewportState = &pipelineViewportStateInfo,
+        .pRasterizationState = &pipelineRasterizationStateCreateInfo,
+        .pMultisampleState = NULL,
+        .pDepthStencilState = &pipelineDepthStencilStateCreateInfo,
+        .pColorBlendState = &colorBlendStateCreateInfo,
+        .pDynamicState = &dynamicState,
+        .layout = pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[0],
+        .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
+        .subpass = 0,
+        .basePipelineHandle = VK_NULL_HANDLE,
+        .basePipelineIndex = 0,
+    };
+    VkGraphicsPipelineCreateInfo lightingPipeline = {
+
+    };
     VkPipelineCache pipelineCache = NULL;
-    VkGraphicsPipelineCreateInfo vkGraphicsPipelineCreateInfos[pGraphicEngine->deferredRenderPipeline.vkPipelineCount];
+    VkGraphicsPipelineCreateInfo vkGraphicsPipelineCreateInfos[] = {
+        geometryPipeline,
+        lightingPipeline,
+    };
     vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, pGraphicEngine->deferredRenderPipeline.vkPipelineCount, vkGraphicsPipelineCreateInfos, NULL, pGraphicEngine->deferredRenderPipeline.vkPipelines);
 
-    pGraphicEngine->deferredRenderPipeline.vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pGraphicEngine->swapchainImageCount);
-
-    for (int32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
+    vkDestroyDescriptorSetLayout(pGraphicEngine->vkDevice, descriptorSetLayout, NULL);
+    DestroyVkShaderModule(pGraphicEngine, geometryVertShaderModule);
+    DestroyVkShaderModule(pGraphicEngine, geometryFragShaderModule);
+}
+static void DestroyVkPipelines(GraphicEngine *pGraphicEngine)
+{
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
     {
-        uint32_t attachmentCount = 2;
-        VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[i], pGraphicEngine->depthGraphicImage.vkImageView};
-        VkFramebufferCreateInfo framebufferCreateInfo = {
-            .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
-            .pNext = NULL,
-            .flags = 0,
-            .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
-            .attachmentCount = attachmentCount,
-            .pAttachments = attachments,
-            .width = pGraphicEngine->swapchainExtent.width,
-            .height = pGraphicEngine->swapchainExtent.height,
-            .layers = 1,
-        };
-        vkCreateFramebuffer(pGraphicEngine->vkDevice, &framebufferCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i]);
-        TRYRETURNVKERROR(result);
+        vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[i], NULL);
+    }
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
+    {
+        vkDestroyPipelineLayout(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts[i], NULL);
     }
-    return result;
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkPipelineLayouts);
+
+}
+
+void DestroyVkShaderModule(GraphicEngine *pGraphicEngine, VkShaderModule vkShaderModule)
+{
+    vkDestroyShaderModule(pGraphicEngine->vkDevice, vkShaderModule, NULL);
+}
+
+void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    CreateVkRenderPass(pGraphicEngine);
+    CreateVkFramebuffers(pGraphicEngine);
 }
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -183,12 +461,14 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
             .depthStencil = {1.0f, 0},
         },
     };
+
+    PrepareCurrentFrambuffer(pGraphicEngine);
     VkRenderPassBeginInfo renderPassBeginInfo =
         {
             .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
             .pNext = NULL,
             .renderPass = deferredRenderPipeline.vkRenderPass,
-            .framebuffer = deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
+            .framebuffer = pGraphicEngine->deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
             .renderArea = renderArea,
             .clearValueCount = clearValueCount,
             .pClearValues = clearValues,
@@ -203,15 +483,6 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    for (int32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
-    {
-        vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
-    }
-    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkFramebuffers);
-    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
-    {
-        vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[i], NULL);
-    }
-
-    vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkRenderPass, NULL);
+    DestroyVkRenderPass(pGraphicEngine);
+    DestroyVkFramebuffers(pGraphicEngine);
 }
\ No newline at end of file

commit d39bc2154efafcd3fa7aef496896a2a395940718
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Aug 23 01:00:31 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index bc423c4..5735354 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -125,6 +125,28 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage de
     VkPipelineCache pipelineCache = NULL;
     VkGraphicsPipelineCreateInfo vkGraphicsPipelineCreateInfos[pGraphicEngine->deferredRenderPipeline.vkPipelineCount];
     vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, pGraphicEngine->deferredRenderPipeline.vkPipelineCount, vkGraphicsPipelineCreateInfos, NULL, pGraphicEngine->deferredRenderPipeline.vkPipelines);
+
+    pGraphicEngine->deferredRenderPipeline.vkFramebuffers = TickernelMalloc(sizeof(VkFramebuffer) * pGraphicEngine->swapchainImageCount);
+
+    for (int32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
+    {
+        uint32_t attachmentCount = 2;
+        VkImageView attachments[] = {pGraphicEngine->swapchainImageViews[i], pGraphicEngine->depthGraphicImage.vkImageView};
+        VkFramebufferCreateInfo framebufferCreateInfo = {
+            .sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO,
+            .pNext = NULL,
+            .flags = 0,
+            .renderPass = pGraphicEngine->deferredRenderPipeline.vkRenderPass,
+            .attachmentCount = attachmentCount,
+            .pAttachments = attachments,
+            .width = pGraphicEngine->swapchainExtent.width,
+            .height = pGraphicEngine->swapchainExtent.height,
+            .layers = 1,
+        };
+        vkCreateFramebuffer(pGraphicEngine->vkDevice, &framebufferCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i]);
+        TRYRETURNVKERROR(result);
+    }
+    return result;
 }
 
 void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
@@ -181,6 +203,11 @@ void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    for (int32_t i = 0; i < pGraphicEngine->swapchainImageCount; i++)
+    {
+        vkDestroyFramebuffer(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkFramebuffers[i], NULL);
+    }
+    TickernelFree(pGraphicEngine->deferredRenderPipeline.vkFramebuffers);
     for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
     {
         vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[i], NULL);

commit 4772d9e0d2f7a4a1623b93a1ec46e5ad2b6eb729
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Fri Aug 23 00:31:12 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index a508f21..bc423c4 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,6 +1,6 @@
 #include <deferredRenderPipeline.h>
 
-void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, DeferredRenderPipeline *pDeferredRenderPipeline)
+void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage)
 {
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
@@ -118,16 +118,73 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage de
         .pDependencies = subpassDependencies,
     };
     VkResult result = VK_SUCCESS;
-    VkRenderPass renderPass;
-    result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &renderPass);
+    result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &pGraphicEngine->deferredRenderPipeline.vkRenderPass);
     TryThrowVulkanError(result);
+
+    pGraphicEngine->deferredRenderPipeline.vkPipelineCount = 2;
+    VkPipelineCache pipelineCache = NULL;
+    VkGraphicsPipelineCreateInfo vkGraphicsPipelineCreateInfos[pGraphicEngine->deferredRenderPipeline.vkPipelineCount];
+    vkCreateGraphicsPipelines(pGraphicEngine->vkDevice, pipelineCache, pGraphicEngine->deferredRenderPipeline.vkPipelineCount, vkGraphicsPipelineCreateInfos, NULL, pGraphicEngine->deferredRenderPipeline.vkPipelines);
 }
 
-void UpdateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipeline *pDeferredRenderPipeline)
+void RecordDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    VkResult result = VK_SUCCESS;
+    RenderPipeline deferredRenderPipeline = pGraphicEngine->deferredRenderPipeline;
+
+    VkCommandBuffer vkCommandBuffer = pGraphicEngine->graphicVkCommandBuffers[pGraphicEngine->frameIndex];
+    VkCommandBufferBeginInfo vkCommandBufferBeginInfo =
+        {
+            .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO,
+            .pNext = NULL,
+            .flags = 0,
+            .pInheritanceInfo = NULL,
+        };
+    result = vkBeginCommandBuffer(vkCommandBuffer, &vkCommandBufferBeginInfo);
+    TryThrowVulkanError(result);
+    VkOffset2D offset =
+        {
+            .x = 0,
+            .y = 0,
+        };
+    VkRect2D renderArea =
+        {
+            .offset = offset,
+            .extent = pGraphicEngine->swapchainExtent,
+        };
+    uint32_t clearValueCount = 2;
+    VkClearValue *clearValues = (VkClearValue[]){
+        {
+            .color = {0.0f, 0.0f, 0.0f, 1.0f},
+        },
+        {
+            .depthStencil = {1.0f, 0},
+        },
+    };
+    VkRenderPassBeginInfo renderPassBeginInfo =
+        {
+            .sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO,
+            .pNext = NULL,
+            .renderPass = deferredRenderPipeline.vkRenderPass,
+            .framebuffer = deferredRenderPipeline.vkFramebuffers[pGraphicEngine->frameIndex],
+            .renderArea = renderArea,
+            .clearValueCount = clearValueCount,
+            .pClearValues = clearValues,
+        };
+    vkCmdBeginRenderPass(vkCommandBuffer, &renderPassBeginInfo, VK_SUBPASS_CONTENTS_INLINE);
+    // vkCmdBindPipeline(vkCommandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, vkPipeline);
+
+    vkCmdEndRenderPass(vkCommandBuffer);
+    result = vkEndCommandBuffer(vkCommandBuffer);
+    TryThrowVulkanError(result);
 }
 
-void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipeline *pDeferredRenderPipeline)
+void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyRenderPass(pGraphicEngine->vkDevice, pDeferredRenderPipeline->vkRenderPass, NULL);
+    for (uint32_t i = 0; i < pGraphicEngine->deferredRenderPipeline.vkPipelineCount; i++)
+    {
+        vkDestroyPipeline(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkPipelines[i], NULL);
+    }
+
+    vkDestroyRenderPass(pGraphicEngine->vkDevice, pGraphicEngine->deferredRenderPipeline.vkRenderPass, NULL);
 }
\ No newline at end of file

commit 1a59581d37779664b3c8034b9cbf909f027ca551
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Aug 22 18:17:58 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 5b585ad..a508f21 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -1,9 +1,7 @@
 #include <deferredRenderPipeline.h>
 
-void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, GraphicImage depthGraphicImage, GraphicImage albedoGraphicImage, DeferredRenderPipeline *pDeferredRenderPipeline)
 {
-    ReferenceDepth(pGraphicEngine);
-    ReferenceAlbedo(pGraphicEngine);
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
         .format = pGraphicEngine->surfaceFormat.format,
@@ -17,7 +15,7 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     };
     VkAttachmentDescription depthAttachmentDescription = {
         .flags = 0,
-        .format = pGraphicEngine->depthFormat,
+        .format = depthGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -28,7 +26,7 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     };
     VkAttachmentDescription albedoAttachmentDescription = {
         .flags = 0,
-        .format = pGraphicEngine->albedoFormat,
+        .format = albedoGraphicImage.vkFormat,
         .samples = VK_SAMPLE_COUNT_1_BIT,
         .loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
         .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
@@ -125,12 +123,11 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
     TryThrowVulkanError(result);
 }
 
-void UpdateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+void UpdateDeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipeline *pDeferredRenderPipeline)
 {
 }
-void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+
+void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine, DeferredRenderPipeline *pDeferredRenderPipeline)
 {
-    vkDestroyRenderPass(    , NULL, NULL);
-    DereferenceDepth(pGraphicEngine);
-    DereferenceAlbedo(pGraphicEngine);
+    vkDestroyRenderPass(pGraphicEngine->vkDevice, pDeferredRenderPipeline->vkRenderPass, NULL);
 }
\ No newline at end of file

commit 48ace1659fb9817b9076d543eacdee202b07a7c8
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Thu Aug 22 01:00:10 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 144c0e4..5b585ad 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -130,7 +130,7 @@ void UpdateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 }
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
-    vkDestroyRenderPass(pGraphicEngine, NULL, NULL);
+    vkDestroyRenderPass(    , NULL, NULL);
     DereferenceDepth(pGraphicEngine);
     DereferenceAlbedo(pGraphicEngine);
 }
\ No newline at end of file

commit 1ef52b5d5c87dc6d7e512784f34234298e495b7a
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Wed Aug 21 00:46:30 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 4eeac2f..144c0e4 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -126,9 +126,11 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 }
 
 void UpdateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
-{}
+{
+}
 void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    vkDestroyRenderPass(pGraphicEngine, NULL, NULL);
     DereferenceDepth(pGraphicEngine);
     DereferenceAlbedo(pGraphicEngine);
 }
\ No newline at end of file

commit 507545b411831e79bb063d5da472815ba4337750
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Tue Aug 20 18:45:20 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
index 32854b2..4eeac2f 100644
--- a/src/deferredRenderPipeline.c
+++ b/src/deferredRenderPipeline.c
@@ -2,6 +2,8 @@
 
 void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
 {
+    ReferenceDepth(pGraphicEngine);
+    ReferenceAlbedo(pGraphicEngine);
     VkAttachmentDescription colorAttachmentDescription = {
         .flags = 0,
         .format = pGraphicEngine->surfaceFormat.format,
@@ -117,8 +119,16 @@ void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
         .dependencyCount = dependencyCount,
         .pDependencies = subpassDependencies,
     };
-    TickernelRenderPass tickernelRenderPass = {
-        vkRenderPassCreateInfo = vkRenderPassCreateInfo,
-    };
+    VkResult result = VK_SUCCESS;
+    VkRenderPass renderPass;
+    result = vkCreateRenderPass(pGraphicEngine->vkDevice, &vkRenderPassCreateInfo, NULL, &renderPass);
+    TryThrowVulkanError(result);
+}
 
+void UpdateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{}
+void DestroyDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    DereferenceDepth(pGraphicEngine);
+    DereferenceAlbedo(pGraphicEngine);
 }
\ No newline at end of file

commit 00314df6a9d5eecd66029755505fc35839bc6595
Author: Forgemaster Gua <53552547+Clevergua@users.noreply.github.com>
Date:   Mon Aug 19 22:06:55 2024 +0800

    Update

diff --git a/src/deferredRenderPipeline.c b/src/deferredRenderPipeline.c
new file mode 100644
index 0000000..32854b2
--- /dev/null
+++ b/src/deferredRenderPipeline.c
@@ -0,0 +1,124 @@
+#include <deferredRenderPipeline.h>
+
+void CreateDeferredRenderPipeline(GraphicEngine *pGraphicEngine)
+{
+    VkAttachmentDescription colorAttachmentDescription = {
+        .flags = 0,
+        .format = pGraphicEngine->surfaceFormat.format,
+        .samples = VK_SAMPLE_COUNT_1_BIT,
+        .loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .storeOp = VK_ATTACHMENT_STORE_OP_STORE,
+        .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
+        .finalLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR,
+    };
+    VkAttachmentDescription depthAttachmentDescription = {
+        .flags = 0,
+        .format = pGraphicEngine->depthFormat,
+        .samples = VK_SAMPLE_COUNT_1_BIT,
+        .loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
+        .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_CLEAR,
+        .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
+        .finalLayout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
+    };
+    VkAttachmentDescription albedoAttachmentDescription = {
+        .flags = 0,
+        .format = pGraphicEngine->albedoFormat,
+        .samples = VK_SAMPLE_COUNT_1_BIT,
+        .loadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .storeOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .stencilLoadOp = VK_ATTACHMENT_LOAD_OP_DONT_CARE,
+        .stencilStoreOp = VK_ATTACHMENT_STORE_OP_DONT_CARE,
+        .initialLayout = VK_IMAGE_LAYOUT_UNDEFINED,
+        .finalLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
+    };
+
+    uint32_t attachmentCount = 3;
+    VkAttachmentDescription vkAttachmentDescriptions[] = {
+        colorAttachmentDescription,
+        depthAttachmentDescription,
+        albedoAttachmentDescription,
+    };
+
+    VkAttachmentReference geometryDepthAttachmentReference = {
+        .attachment = 1,
+        .layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
+    };
+    VkAttachmentReference geometryAlbedoAttachmentReference = {
+        .attachment = 2,
+        .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
+    };
+    VkSubpassDescription geometrySubpassDescription = {
+        .flags = 0,
+        .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
+        .inputAttachmentCount = 0,
+        .pInputAttachments = NULL,
+        .colorAttachmentCount = 1,
+        .pColorAttachments = &geometryAlbedoAttachmentReference,
+        .pResolveAttachments = NULL,
+        .pDepthStencilAttachment = &geometryDepthAttachmentReference,
+        .preserveAttachmentCount = 0,
+        .pPreserveAttachments = NULL,
+    };
+
+    VkAttachmentReference lightColorAttachmentReference = {
+        .attachment = 0,
+        .layout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL,
+    };
+    VkAttachmentReference lightDepthAttachmentReference = {
+        .attachment = 1,
+        .layout = VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL,
+    };
+    VkAttachmentReference lightAlbedoAttachmentReference = {
+        .attachment = 2,
+        .layout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
+    };
+    VkSubpassDescription ligthSubpassDescription = {
+        .flags = 0,
+        .pipelineBindPoint = VK_PIPELINE_BIND_POINT_GRAPHICS,
+        .inputAttachmentCount = 2,
+        .pInputAttachments = (const VkAttachmentReference[]){lightDepthAttachmentReference, lightAlbedoAttachmentReference},
+        .colorAttachmentCount = 1,
+        .pColorAttachments = &lightColorAttachmentReference,
+        .pResolveAttachments = NULL,
+        .pDepthStencilAttachment = &geometryDepthAttachmentReference,
+        .preserveAttachmentCount = 0,
+        .pPreserveAttachments = NULL,
+    };
+    uint32_t subpassCount = 2;
+    VkSubpassDescription vkSubpassDescriptions[] = {
+        geometrySubpassDescription,
+        ligthSubpassDescription,
+    };
+    uint32_t dependencyCount = subpassCount - 1;
+    VkSubpassDependency subpassDependencies[dependencyCount];
+    for (uint32_t i = 0; i < dependencyCount; i++)
+    {
+        subpassDependencies[i].srcSubpass = i;
+        subpassDependencies[i].dstSubpass = i + 1;
+        subpassDependencies[i].srcStageMask = VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
+        subpassDependencies[i].dstStageMask = VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
+        subpassDependencies[i].srcAccessMask = VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
+        subpassDependencies[i].dstAccessMask = VK_ACCESS_INPUT_ATTACHMENT_READ_BIT;
+        subpassDependencies[i].dependencyFlags = VK_DEPENDENCY_BY_REGION_BIT;
+    }
+
+    VkRenderPassCreateInfo vkRenderPassCreateInfo = {
+        .sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO,
+        .pNext = NULL,
+        .flags = 0,
+        .attachmentCount = attachmentCount,
+        .pAttachments = vkAttachmentDescriptions,
+        .subpassCount = subpassCount,
+        .pSubpasses = vkSubpassDescriptions,
+        .dependencyCount = dependencyCount,
+        .pDependencies = subpassDependencies,
+    };
+    TickernelRenderPass tickernelRenderPass = {
+        vkRenderPassCreateInfo = vkRenderPassCreateInfo,
+    };
+
+}
\ No newline at end of file
